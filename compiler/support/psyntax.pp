((lambda () ((lambda () (define g160 "noexpand") (define g161 (lambda (g600 g601) (vector (quote syntax-object) g600 g601))) (define g162 (lambda (g602) (if (vector? g602) (if (= (vector-length g602) 3) (eq? (vector-ref g602 0) (quote syntax-object)) #f) #f))) (define g163 (lambda (g603) (vector-ref g603 1))) (define g164 (lambda (g604) (vector-ref g604 2))) (define g165 (lambda (g605 g606) (vector-set! g605 1 g606))) (define g166 (lambda (g607 g608) (vector-set! g607 2 g608))) (define g230 (lambda (g609) #f)) (define g231 (lambda (g610) (eval (list g160 g610)))) (define g232 (lambda (g611) (eval (list g160 g611)))) (define g233 (lambda (g612 g613 g614) (error g612 "~a ~s" g613 g614))) (define g238 (lambda (g615 g616) ($sc-put-cte g615 g616 (quote *top*)))) (define g239 (lambda (g617) (getprop g617 (quote *sc-expander*)))) (define g240 (lambda (g618 g619) (if (not g619) (remprop g618 (quote *sc-expander*)) (putprop g618 (quote *sc-expander*) g619)))) (define g241 (lambda (g620) #f)) (define g242 (lambda (g621 g622) (getprop g621 g622))) (define g243 (lambda (g623 g624 g625) (if (not g625) (remprop g623 g624) (putprop g623 g624 g625)))) (define g244 ((lambda (g626) ((lambda (g627 g628) ((lambda () (define g629 (lambda (g631) (string-ref g626 g631))) (define g630 (lambda (g632) (((lambda () (define g633 (lambda (g634 g635) (if (< g634 g627) (list->string (cons (g629 g634) g635)) ((lambda (g636 g637) (g633 g637 (cons (g629 g636) g635))) (modulo g634 g627) (quotient g634 g627))))) ((lambda () g633)))) g632 (quote ())))) ((lambda () ((lambda (g638) (lambda (g639) (begin (set! g638 (+ g638 1)) (string->symbol (string-append g628 (g630 g638)))))) -1)))))) (string-length g626) (make-gensym-session-key))) "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&*/:<=>?~_^.+-")) (define g327 (lambda (g640) (if (pair? g640) (eq? (car g640) (quote lambda)) #f))) (define g345 (lambda (g641 g642) (((lambda () (define g643 (lambda (g644) (if (null? (cdr g644)) (car g644) (if (equal? (car g644) (quote (void))) (g643 (cdr g644)) (cons (quote begin) g644))))) ((lambda () g643)))) g642))) (define g346 (lambda (g645 g646 g647 g648) (if (null? g646) g648 (list (cons (quote lambda) (cons (quote ()) (append (map (lambda (g649 g650) (list (quote define) g649 g650)) g646 g647) (list (list (list (quote lambda) (quote ()) g648)))))))))) (define g347 (lambda (g651 g652 g653 g654) (g346 g651 g652 g653 g654))) (define g389 car) (define g390 cdr) (define g391 set-car!) (define g392 set-cdr!) (define g393 (lambda (g655) (if (pair? g655) (symbol? (car g655)) #f))) (define g403 (lambda (g656 g657 g658) (cons (cons g656 g657) g658))) (define g404 (lambda (g659 g660 g661) (if (null? g659) g661 (g404 (cdr g659) (cdr g660) (g403 (car g659) (car g660) g661))))) (define g405 (lambda (g662 g663 g664) (if (null? g662) g664 (g405 (cdr g662) (cdr g663) (g403 (car g662) (cons (quote lexical) (car g663)) g664))))) (define g406 (lambda (g665) (if (null? g665) (quote ()) ((lambda (g666) (if (memq (cadr g666) (quote (lexical syntax))) (g406 (cdr g665)) (cons g666 (g406 (cdr g665))))) (car g665))))) (define g407 (lambda (g667 g668) ((lambda (g669) (if g669 ((lambda (g670) (eq? (g389 g670) (quote displaced-lexical))) (g411 g669 g668)) #f)) (g529 g667 (quote (())))))) (define g408 (lambda (g671) (syntax-error g671 (if (g529 g671 (quote (()))) "identifier out of context" "identifier not visible")))) (define g409 (lambda (g672 g673) ((lambda (g674) (if g674 (cdr g674) (if (symbol? g672) ((lambda (g675) (if g675 g675 (cons (quote global) g672))) (g239 g672)) (quote (displaced-lexical . #f))))) (assq g672 g673)))) (define g410 (lambda (g676) (if (procedure? g676) (cons (quote macro) g676) (if (g393 g676) ((lambda (g677) (if (memv g677 (quote (core macro macro!))) (if (procedure? (g390 g676)) g676 #f) (if (memv g677 (quote ($module))) (if (g547 (g390 g676)) g676 #f) g676))) (g389 g676)) #f)))) (define g411 (lambda (g678 g679) ((lambda () (define g680 (lambda (g681 g682) (begin (g391 g681 (g389 g682)) (g392 g681 (g390 g682))))) ((lambda () ((lambda (g683) (begin (if (eq? (g389 g683) (quote deferred)) (g680 g683 (g412 (g390 g683))) (void)) g683)) (g409 g678 g679)))))))) (define g412 (lambda (g684) ((lambda (g685) ((lambda (g686) (if g686 g686 (syntax-error g685 "invalid transformer"))) (g410 g685))) (g232 g684)))) (define g413 (lambda (g687) (if (g327 g687) (cons (quote deferred) g687) (g412 g687)))) (define g414 (lambda (g688 g689 g690) (g238 g689 (cons g688 g690)))) (define g415 (lambda (g691) (if (g162 g691) (symbol? ((lambda (g692) (if (g230 g692) (annotation-expression g692) g692)) (g163 g691))) #f))) (define g416 (lambda (g693) (if (symbol? g693) #t (if (g162 g693) (symbol? ((lambda (g694) (if (g230 g694) (annotation-expression g694) g694)) (g163 g693))) (if (g230 g693) (symbol? (annotation-expression g693)) #f))))) (define g422 (lambda (g695 g696) (if (g162 g695) (values ((lambda (g697) (if (g230 g697) (annotation-expression g697) g697)) (g163 g695)) (g519 (g424 g696) (g424 (g164 g695)))) (values ((lambda (g698) (if (g230 g698) (annotation-expression g698) g698)) g695) (g424 g696))))) (define g423 cons) (define g424 car) (define g425 cdr) (define g460 (lambda (g699 g700) (g457 g699 g700))) (define g459 (lambda (g701) (g456 g701))) (define g458 (lambda () (g454 (g461)))) (define g457 (lambda (g702 g703) (vector-set! g702 1 g703))) (define g456 (lambda (g704) (vector-ref g704 1))) (define g455 (lambda (g705) (if (vector? g705) (if (= (vector-length g705) 2) (eq? (vector-ref g705 0) (quote indirect-label)) #f) #f))) (define g454 (lambda (g706) (vector (quote indirect-label) g706))) (define g461 (lambda () (string #\i))) (define g462 (lambda (g707) ((lambda (g708) (if g708 g708 ((lambda (g709) (if g709 g709 (g455 g707))) (symbol? g707)))) (string? g707)))) (define g463 (lambda (g710) (if (null? g710) (quote ()) (cons (g461) (g463 (cdr g710)))))) (define g464 (lambda (g711 g712 g713) (vector (quote ribcage) g711 g712 g713))) (define g465 (lambda (g714) (if (vector? g714) (if (= (vector-length g714) 4) (eq? (vector-ref g714 0) (quote ribcage)) #f) #f))) (define g466 (lambda (g715) (vector-ref g715 1))) (define g467 (lambda (g716) (vector-ref g716 2))) (define g468 (lambda (g717) (vector-ref g717 3))) (define g469 (lambda (g718 g719) (vector-set! g718 1 g719))) (define g470 (lambda (g720 g721) (vector-set! g720 2 g721))) (define g471 (lambda (g722 g723) (vector-set! g722 3 g723))) (define g472 (lambda (g724 g725) (vector (quote top-ribcage) g724 g725))) (define g473 (lambda (g726) (if (vector? g726) (if (= (vector-length g726) 3) (eq? (vector-ref g726 0) (quote top-ribcage)) #f) #f))) (define g474 (lambda (g727) (vector-ref g727 1))) (define g475 (lambda (g728) (vector-ref g728 2))) (define g476 (lambda (g729 g730) (vector-set! g729 1 g730))) (define g477 (lambda (g731 g732) (vector-set! g731 2 g732))) (define g478 (lambda (g733) (vector (quote import-token) g733))) (define g479 (lambda (g734) (if (vector? g734) (if (= (vector-length g734) 2) (eq? (vector-ref g734 0) (quote import-token)) #f) #f))) (define g480 (lambda (g735) (vector-ref g735 1))) (define g481 (lambda (g736 g737) (vector-set! g736 1 g737))) (define g482 (lambda (g738 g739) (vector (quote env) g738 g739))) (define g483 (lambda (g740) (if (vector? g740) (if (= (vector-length g740) 3) (eq? (vector-ref g740 0) (quote env)) #f) #f))) (define g484 (lambda (g741) (vector-ref g741 1))) (define g485 (lambda (g742) (vector-ref g742 2))) (define g486 (lambda (g743 g744) (vector-set! g743 1 g744))) (define g487 (lambda (g745 g746) (vector-set! g745 2 g746))) (define g497 (lambda (g747) (g423 (cons #f (g424 g747)) (cons (quote shift) (g425 g747))))) (define g502 #f) (define g507 (lambda (g748 g749 g750) (begin (g469 g748 (cons ((lambda (g751) (if (g230 g751) (annotation-expression g751) g751)) (g163 g749)) (g466 g748))) (g470 g748 (cons (g424 (g164 g749)) (g467 g748))) (g471 g748 (cons g750 (g468 g748)))))) (define g508 (lambda (g752 g753) (g509 g752 (g164 g753)))) (define g509 (lambda (g754 g755) (begin (g469 g754 (cons g502 (g466 g754))) (g470 g754 (cons (g424 g755) (g467 g754)))))) (define g510 (lambda (g756 g757) (g469 g756 (cons (g478 g757) (g466 g756))))) (define g511 (lambda (g758 g759 g760) ((lambda (g761) (if g761 (((lambda () (define g762 (lambda (g763) (if (pair? g763) ((lambda (g764) (if g764 g764 (g762 (cdr g763)))) (g762 (car g763))) (if (symbol? g763) (if (g521 g760 (g424 (quote ((top))))) g763 #f) (if (g521 g760 (g424 (g164 g763))) g763 #f))))) ((lambda () g762)))) g761) #f)) (g242 g758 g759)))) (define g512 (lambda (g765 g766) ((lambda () (define g767 (lambda (g770) (if (symbol? g770) (g424 (quote ((top)))) (g424 (g164 g770))))) (define g768 (lambda (g771 g772) (if (not g772) g771 (cons g771 g772)))) (define g769 (lambda (g773 g774) (if (pair? g774) (if (g521 (g767 (car g774)) g773) (g769 g773 (cdr g774)) (g768 (car g774) (g769 g773 (cdr g774)))) (if g774 (if (not (g521 (g767 g774) g773)) g774 #f) #f)))) ((lambda () ((lambda (g775 g776) ((lambda (g777) (g243 g775 g766 (if (eq? g765 g775) g777 (g768 (if (g521 g776 (g424 (quote ((top))))) (g516 g765) g765) g777)))) (g769 g776 (g242 g775 g766)))) ((lambda (g778) ((lambda (g779) (if (g230 g779) (annotation-expression g779) g779)) (if (g162 g778) (g163 g778) g778))) g765) (g767 g765)))))))) (define g513 (lambda (g780 g781 g782) (if (null? g780) g782 (g423 (g424 g782) (cons ((lambda (g783) ((lambda (g784) ((lambda (g785 g786) (begin (((lambda () (define g787 (lambda (g788 g789) (if (not (null? g788)) (call-with-values (lambda () (g422 (car g788) g782)) (lambda (g790 g791) (begin (vector-set! g785 g789 g790) (vector-set! g786 g789 g791) (g787 (cdr g788) (+ g789 1))))) (void)))) ((lambda () g787)))) g780 0) (g464 g785 g786 g783))) (make-vector g784) (make-vector g784))) (vector-length g783))) (list->vector g781)) (g425 g782)))))) (define g514 (lambda (g792 g793 g794) (g161 g792 (g423 g793 (list (g464 (vector g792) (vector g793) (vector g794))))))) (define g515 (lambda (g795) (call-with-values (lambda () (g527 g795 (quote (())))) (lambda (g796 g797) (begin (if (not g796) (syntax-error g795 "identifier not visible for export") (void)) (g514 ((lambda (g798) ((lambda (g799) (if (g230 g799) (annotation-expression g799) g799)) (if (g162 g798) (g163 g798) g798))) g795) g797 g796)))))) (define g516 (lambda (g800) (vector-ref (g468 (car (g425 (g164 g800)))) 0))) (define g517 (lambda (g801 g802) (if (null? g802) g801 (append g801 g802)))) (define g518 (lambda (g803 g804) ((lambda (g805 g806) (if (null? g805) (if (null? g806) g804 (g423 (g424 g804) (g520 g806 (g425 g804)))) (g423 (g519 g805 (g424 g804)) (g520 g806 (g425 g804))))) (g424 g803) (g425 g803)))) (define g519 (lambda (g807 g808) (g517 g807 g808))) (define g520 (lambda (g809 g810) (g517 g809 g810))) (define g521 (lambda (g811 g812) ((lambda (g813) (if g813 g813 (if (not (null? g811)) (if (not (null? g812)) (if (eq? (car g811) (car g812)) (g521 (cdr g811) (cdr g812)) #f) #f) #f))) (eq? g811 g812)))) (define g525 (lambda (g814 g815 g816) ((lambda (g817) ((lambda (g818) (if g818 ((lambda (g819) (if (symbol? g819) g819 (g516 g819))) g818) (if (if (g475 g816) (g521 g815 (g424 (quote ((top))))) #f) (if (g522 g817) g814 ((lambda (g820) (begin (g512 (g514 g814 (g424 (quote ((top)))) g820) g817) g820)) (g244 g814))) #f))) (g511 g814 g817 g815))) (g474 g816)))) (define g524 (lambda (g821 g822 g823) ((lambda (g824) ((lambda (g825) (if g825 ((lambda (g826) (call-with-values (lambda () (if (symbol? g826) (values g826 (g514 g821 g822 g826)) (values (g516 g826) g826))) (lambda (g827 g828) (if (if (g241 g827) (g521 g822 (g424 (quote ((top))))) #f) (g523 g821 g822 g824) (values g827 g828))))) g825) (if (if (g522 g824) (if (g521 g822 (g424 (quote ((top))))) (not (g241 g821)) #f) #f) (values g821 g821) (g523 g821 g822 g824)))) (g511 g821 g824 g822))) (g474 g823)))) (define g523 (lambda (g829 g830 g831) ((lambda (g832) ((lambda (g833) (begin (g512 g833 g831) (values g832 g833))) (g514 g829 g830 g832))) (g244 g829)))) (define g522 (lambda (g834) (eq? g834 (quote *top*)))) (define g526 (lambda (g835 g836) ((lambda () (define g837 (lambda (g840 g841 g842) (if (null? g841) (values #f g842) ((lambda (g843) (if (eq? g843 (quote shift)) (g837 g840 (cdr g841) (cdr g842)) (if (g465 g843) ((lambda (g844) (if (vector? g844) (g839 g840 g841 g842 g844 g843) (g838 g840 g841 g842 g844 g843))) (g466 g843)) (if (g473 g843) ((lambda (g845) (if g845 ((lambda (g846) (values g846 g842)) g845) (g837 g840 (cdr g841) g842))) (g525 g840 g842 g843)) (error (quote sc-expand) "internal error in id-var-name-loc&marks: improper subst ~s" g841))))) (car g841))))) (define g838 (lambda (g847 g848 g849 g850 g851) (((lambda () (define g852 (lambda (g853 g854) (if (null? g853) (g837 g847 (cdr g848) g849) (if (if (eq? (car g853) g847) (g521 g849 (list-ref (g467 g851) g854)) #f) (values (list-ref (g468 g851) g854) g849) (if (g479 (car g853)) ((lambda (g855) (if g855 ((lambda (g856) (values (if (symbol? g856) g856 (g516 g856)) g849)) g855) (g852 (cdr g853) g854))) (g511 g847 (g480 (car g853)) g849)) (if (if (eq? (car g853) g502) (g521 g849 (list-ref (g467 g851) g854)) #f) (values #f g849) (g852 (cdr g853) (+ g854 1)))))))) ((lambda () g852)))) g850 0))) (define g839 (lambda (g857 g858 g859 g860 g861) ((lambda (g862) (((lambda () (define g863 (lambda (g864) (if (= g864 g862) (g837 g857 (cdr g858) g859) (if (if (eq? (vector-ref g860 g864) g857) (g521 g859 (vector-ref (g467 g861) g864)) #f) (values (vector-ref (g468 g861) g864) g859) (g863 (+ g864 1)))))) ((lambda () g863)))) 0)) (vector-length g860)))) ((lambda () (if (symbol? g835) (g837 g835 (g425 g836) (g424 g836)) (if (g162 g835) ((lambda (g865 g866) (call-with-values (lambda () (g837 g865 (g425 g836) (g519 (g424 g836) (g424 g866)))) (lambda (g867 g868) (if g867 (values g867 g868) (g837 g865 (g425 g866) g868))))) ((lambda (g869) (if (g230 g869) (annotation-expression g869) g869)) (g163 g835)) (g164 g835)) (if (g230 g835) (g837 ((lambda (g870) (if (g230 g870) (annotation-expression g870) g870)) g835) (g425 g836) (g424 g836)) (g233 (quote id-var-name) "invalid id" g835)))))))))) (define g527 (lambda (g871 g872) (call-with-values (lambda () (g526 g871 g872)) (lambda (g873 g874) (values (if (g455 g873) (g459 g873) g873) g874))))) (define g528 (lambda (g875 g876) (call-with-values (lambda () (g526 g875 g876)) (lambda (g877 g878) g877)))) (define g529 (lambda (g879 g880) (call-with-values (lambda () (g526 g879 g880)) (lambda (g881 g882) (if (g455 g881) (g459 g881) g881))))) (define g530 (lambda (g883 g884) (if (eq? ((lambda (g885) ((lambda (g886) (if (g230 g886) (annotation-expression g886) g886)) (if (g162 g885) (g163 g885) g885))) g883) ((lambda (g887) ((lambda (g888) (if (g230 g888) (annotation-expression g888) g888)) (if (g162 g887) (g163 g887) g887))) g884)) (eq? (g529 g883 (quote (()))) (g529 g884 (quote (())))) #f))) (define g531 (lambda (g889 g890) (if (eq? ((lambda (g891) ((lambda (g892) (if (g230 g892) (annotation-expression g892) g892)) (if (g162 g891) (g163 g891) g891))) g889) ((lambda (g893) ((lambda (g894) (if (g230 g894) (annotation-expression g894) g894)) (if (g162 g893) (g163 g893) g893))) g890)) ((lambda (g895 g896) ((lambda (g897) (if g897 g897 (if ((lambda (g898) (if g898 g898 (symbol? g895))) (not g895)) ((lambda (g899) (if g899 g899 (symbol? g896))) (not g896)) #f))) (eq? g895 g896))) (g529 g889 (quote (()))) (g529 g890 (quote (())))) #f))) (define g532 (lambda (g900 g901) (if (if (g162 g900) (g162 g901) #f) (if (eq? ((lambda (g902) (if (g230 g902) (annotation-expression g902) g902)) (g163 g900)) ((lambda (g903) (if (g230 g903) (annotation-expression g903) g903)) (g163 g901))) (g521 (g424 (g164 g900)) (g424 (g164 g901))) #f) (eq? ((lambda (g904) (if (g230 g904) (annotation-expression g904) g904)) g900) ((lambda (g905) (if (g230 g905) (annotation-expression g905) g905)) g901))))) (define g533 (lambda (g906) (if (((lambda () (define g907 (lambda (g908) ((lambda (g909) (if g909 g909 (if (g416 (car g908)) (g907 (cdr g908)) #f))) (null? g908)))) ((lambda () g907)))) g906) (g534 g906) #f))) (define g534 (lambda (g910) (((lambda () (define g911 (lambda (g912) ((lambda (g913) (if g913 g913 (if (not (g536 (car g912) (cdr g912))) (g911 (cdr g912)) #f))) (null? g912)))) ((lambda () g911)))) g910))) (define g535 (lambda (g914 g915 g916) (((lambda () (define g917 (lambda (g918 g919) (if (null? g918) (syntax-error g915) (if (g416 (car g918)) (if (g536 (car g918) g919) (syntax-error (car g918) "duplicate " g916) (g917 (cdr g918) (cons (car g918) g919))) (syntax-error (car g918) "invalid " g916))))) ((lambda () g917)))) g914 (quote ())))) (define g536 (lambda (g920 g921) (if (not (null? g921)) ((lambda (g922) (if g922 g922 (g536 g920 (cdr g921)))) (g532 g920 (car g921))) #f))) (define g537 (lambda (g923 g924) (if (if (null? (g424 g924)) (null? (g425 g924)) #f) g923 (if (g162 g923) (g161 (g163 g923) (g518 g924 (g164 g923))) (if (null? g923) g923 (g161 g923 g924)))))) (define g538 (lambda (g925 g926 g927) (g537 (if (g230 g927) (begin (if (not (eq? (annotation-expression g927) g925)) (error (quote sc-expand) "internal error in source-wrap: ae/x mismatch") (void)) g927) g925) g926))) (define g539 (lambda (g928 g929 g930 g931) (g345 g931 (((lambda () (define g932 (lambda (g933 g934 g935) (if (null? g933) (quote ()) ((lambda (g936) (cons g936 (g932 (cdr g933) g934 g935))) (g579 (car g933) g934 g935))))) ((lambda () g932)))) g928 g929 g930)))) (define g540 (lambda (g937 g938 g939 g940 g941 g942 g943) (g345 g940 (((lambda () (define g944 (lambda (g945 g946 g947 g948 g949) (if (null? g945) (quote ()) ((lambda (g950) (cons g950 (g944 (cdr g945) g946 g947 g948 g949))) (g544 (car g945) g946 g947 g948 g949 g943))))) ((lambda () g944)))) g937 g938 g939 g941 g942)))) (define g541 (lambda (g951 g952) (map (lambda (g953) (if (g531 g953 (quote #3(syntax-object compile ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(when-list w) #2((top)) #2("i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) (quote compile) (if (g531 g953 (quote #3(syntax-object load ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(when-list w) #2((top)) #2("i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) (quote load) (if (g531 g953 (quote #3(syntax-object visit ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(when-list w) #2((top)) #2("i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) (quote visit) (if (g531 g953 (quote #3(syntax-object revisit ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(when-list w) #2((top)) #2("i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) (quote revisit) (if (g531 g953 (quote #3(syntax-object eval ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(when-list w) #2((top)) #2("i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) (quote eval) (syntax-error (g537 g953 g952) "invalid eval-when situation"))))))) g951))) (define g542 (lambda (g954 g955 g956 g957 g958) (if (symbol? g954) ((lambda (g959) ((lambda (g960) ((lambda (g961) ((lambda () ((lambda (g962) (if (memv g962 (quote (lexical))) (values g961 (g390 g960) g954 g956 g957) (if (memv g962 (quote (global))) (values g961 (g390 g960) g954 g956 g957) (if (memv g962 (quote (macro macro!))) (g542 (g583 (g390 g960) g954 g955 g956 g957 g958) g955 (quote (())) #f g958) (values g961 (g390 g960) g954 g956 g957))))) g961)))) (g389 g960))) (g411 g959 g955))) (g529 g954 g956)) (if (pair? g954) ((lambda (g963) (if (g416 g963) ((lambda (g964) ((lambda (g965) ((lambda (g966) ((lambda () ((lambda (g967) (if (memv g967 (quote (lexical))) (values (quote lexical-call) (g390 g965) g954 g956 g957) (if (memv g967 (quote (macro macro!))) (g542 (g583 (g390 g965) g954 g955 g956 g957 g958) g955 (quote (())) #f g958) (if (memv g967 (quote (core))) (values g966 (g390 g965) g954 g956 g957) (if (memv g967 (quote (local-syntax))) (values (quote local-syntax-form) (g390 g965) g954 g956 g957) (if (memv g967 (quote (begin))) (values (quote begin-form) #f g954 g956 g957) (if (memv g967 (quote (eval-when))) (values (quote eval-when-form) #f g954 g956 g957) (if (memv g967 (quote (define))) (values (quote define-form) #f g954 g956 g957) (if (memv g967 (quote (define-syntax))) (values (quote define-syntax-form) #f g954 g956 g957) (if (memv g967 (quote ($module-key))) (values (quote $module-form) #f g954 g956 g957) (if (memv g967 (quote ($import))) (values (quote $import-form) (g390 g965) g954 g956 g957) (if (memv g967 (quote (set!))) (g582 g954 g955 g956 g957 g958) (values (quote call) #f g954 g956 g957))))))))))))) g966)))) (g389 g965))) (g411 g964 g955))) (g529 g963 g956)) (values (quote call) #f g954 g956 g957))) (car g954)) (if (g162 g954) (g542 (g163 g954) g955 (g518 g956 (g164 g954)) #f g958) (if (g230 g954) (g542 (annotation-expression g954) g955 g956 g954 g958) (if ((lambda (g968) ((lambda (g969) (if g969 g969 ((lambda (g970) (if g970 g970 ((lambda (g971) (if g971 g971 (char? g968))) (string? g968)))) (number? g968)))) (boolean? g968))) g954) (values (quote constant) #f g954 g956 g957) (values (quote other) #f g954 g956 g957)))))))) (define g543 (lambda (g972 g973 g974 g975) (call-with-values (lambda () (g542 g972 g973 g974 #f g975)) (lambda (g976 g977 g978 g979 g980) (g580 g976 g977 g978 g973 g979 g980))))) (define g544 (lambda (g981 g982 g983 g984 g985 g986) (call-with-values (lambda () (g542 g981 g982 g983 #f g986)) (lambda (g987 g988 g989 g990 g991) ((lambda (g992) (if (memv g992 (quote (begin-form))) ((lambda (g993) ((lambda (g994) (if g994 (apply (lambda (g995) (g593)) g994) ((lambda (g996) (if g996 (apply (lambda (g997 g998 g999) (g540 (cons g998 g999) g982 g990 g991 g984 g985 g986)) g996) (syntax-error g993))) ($syntax-dispatch g993 (quote (any any . each-any)))))) ($syntax-dispatch g993 (quote (any))))) g989) (if (memv g992 (quote (local-syntax-form))) (g592 g988 g989 g982 g990 g991 (lambda (g1001 g1002 g1003 g1004) (g540 g1001 g1002 g1003 g1004 g984 g985 g986))) (if (memv g992 (quote (eval-when-form))) ((lambda (g1005) ((lambda (g1006) (if g1006 (apply (lambda (g1007 g1008 g1009 g1010) ((lambda (g1011 g1012) ((lambda (g1013 g1014) (if (if (null? g1013) (null? g1014) #f) (g593) (g540 g1012 g982 g990 g991 g1013 g1014 g986))) (g575 g1011 g984) (g575 g1011 g985))) (g541 g1008 g990) (cons g1009 g1010))) g1006) (syntax-error g1005))) ($syntax-dispatch g1005 (quote (any each-any any . each-any))))) g989) (if (memv g992 (quote (define-syntax-form))) (g590 g989 g990 g991 (lambda (g1017 g1018 g1019) ((lambda (g1020) (begin (if (g407 g1020 g982) (g408 g1020) (void)) (if (not (g475 g986)) (syntax-error (g538 g989 g1019 g991) "invalid definition in read-only environment") (void)) ((lambda (g1021) (call-with-values (lambda () (g524 g1021 (g424 (g164 g1020)) g986)) (lambda (g1022 g1023) (begin (if (not (eq? (g529 g1020 (quote (()))) g1022)) (syntax-error (g538 g989 g1019 g991) "definition not permitted") (void)) (if (g241 g1022) (syntax-error (g538 g989 g1019 g991) "invalid definition of read-only identifier") (void)) (g578 g984 (lambda () (list (quote $sc-put-cte) (list (quote quote) g1023) (g579 g1018 (g406 g982) g1019) (list (quote quote) (g474 g986))))))))) ((lambda (g1024) ((lambda (g1025) (if (g230 g1025) (annotation-expression g1025) g1025)) (if (g162 g1024) (g163 g1024) g1024))) g1020)))) (g537 g1017 g1019)))) (if (memv g992 (quote (define-form))) (g589 g989 g990 g991 (lambda (g1026 g1027 g1028) ((lambda (g1029) (begin (if (g407 g1029 g982) (g408 g1029) (void)) (if (not (g475 g986)) (syntax-error (g538 g989 g1028 g991) "invalid definition in read-only environment") (void)) ((lambda (g1030) (call-with-values (lambda () (g524 g1030 (g424 (g164 g1029)) g986)) (lambda (g1031 g1032) (begin (if (not (eq? (g529 g1029 (quote (()))) g1031)) (syntax-error (g538 g989 g1028 g991) "definition not permitted") (void)) (if (g241 g1031) (syntax-error (g538 g989 g1028 g991) "invalid definition of read-only identifier") (void)) (g345 #f (list (g578 g984 (lambda () (list (quote $sc-put-cte) (list (quote quote) g1032) ((lambda (g1033) (if ((lambda (g1034) ((lambda (g1035) (if g1035 g1035 ((lambda (g1036) (if g1036 g1036 ((lambda (g1037) (if g1037 g1037 (char? g1034))) (string? g1034)))) (number? g1034)))) (boolean? g1034))) g1033) g1033 (list (quote quote) g1033))) (cons (quote global) g1031)) (list (quote quote) (g474 g986))))) (g577 g985 (lambda () (list (quote define) g1031 (g579 g1027 g982 g1028)))))))))) ((lambda (g1038) ((lambda (g1039) (if (g230 g1039) (annotation-expression g1039) g1039)) (if (g162 g1038) (g163 g1038) g1038))) g1029)))) (g537 g1026 g1028)))) (if (memv g992 (quote ($module-form))) ((lambda (g1040 g1041) (g587 g989 g990 g991 (g423 (g424 g990) (cons g1041 (g425 g990))) (lambda (g1042 g1043 g1044 g1045) (begin (if (g407 g1043 g1040) (g408 (g537 g1043 g990)) (void)) (if (not (g475 g986)) (syntax-error g1042 "invalid definition in read-only environment") (void)) (g566 g1042 g1040 g986 g1041 g984 g985 g1043 g1044 g1045))))) (cons (quote ("top-level module placeholder" placeholder)) g982) (g464 (quote ()) (quote ()) (quote ()))) (if (memv g992 (quote ($import-form))) (g588 g989 g990 g991 (lambda (g1046 g1047) (begin (if (not (g475 g986)) (syntax-error g1046 "invalid definition in read-only environment") (void)) (g578 g984 (lambda () ((lambda (g1048) ((lambda (g1049) (if (memv g1049 (quote ($module))) (g574 g988 g986 g1047 (g549 (g390 g1048))) (if (memv g1049 (quote (displaced-lexical))) (g408 g1047) (syntax-error g1047 "import from unknown module")))) (g389 g1048))) (g411 (g529 g1047 (quote (()))) (quote ())))))))) (g577 g985 (lambda () (g580 g987 g988 g989 g982 g990 g991))))))))))) g987))))) (define g545 (lambda (g1050) (((lambda () (define g1051 (lambda (g1052 g1053) (if (null? g1052) g1053 (g1051 (cdr g1052) (if (pair? (car g1052)) (g1051 (car g1052) g1053) (cons (car g1052) g1053)))))) ((lambda () g1051)))) g1050 (quote ())))) (define g546 (lambda (g1054 g1055) (vector (quote interface) g1054 g1055))) (define g547 (lambda (g1056) (if (vector? g1056) (if (= (vector-length g1056) 3) (eq? (vector-ref g1056 0) (quote interface)) #f) #f))) (define g548 (lambda (g1057) (vector-ref g1057 1))) (define g549 (lambda (g1058) (vector-ref g1058 2))) (define g550 (lambda (g1059 g1060) (vector-set! g1059 1 g1060))) (define g551 (lambda (g1061 g1062) (vector-set! g1061 2 g1062))) (define g552 (lambda (g1063) (g546 (list->vector (map (lambda (g1064) (if (pair? g1064) (car g1064) g1064)) g1063)) #f))) (define g553 (lambda (g1065 g1066) (g546 (list->vector (map (lambda (g1067) (g515 (if (pair? g1067) (car g1067) g1067))) g1065)) g1066))) (define g554 (lambda (g1068 g1069 g1070 g1071 g1072) (vector (quote module-binding) g1068 g1069 g1070 g1071 g1072))) (define g555 (lambda (g1073) (if (vector? g1073) (if (= (vector-length g1073) 6) (eq? (vector-ref g1073 0) (quote module-binding)) #f) #f))) (define g556 (lambda (g1074) (vector-ref g1074 1))) (define g557 (lambda (g1075) (vector-ref g1075 2))) (define g558 (lambda (g1076) (vector-ref g1076 3))) (define g559 (lambda (g1077) (vector-ref g1077 4))) (define g560 (lambda (g1078) (vector-ref g1078 5))) (define g561 (lambda (g1079 g1080) (vector-set! g1079 1 g1080))) (define g562 (lambda (g1081 g1082) (vector-set! g1081 2 g1082))) (define g563 (lambda (g1083 g1084) (vector-set! g1083 3 g1084))) (define g564 (lambda (g1085 g1086) (vector-set! g1085 4 g1086))) (define g565 (lambda (g1087 g1088) (vector-set! g1087 5 g1088))) (define g566 (lambda (g1089 g1090 g1091 g1092 g1093 g1094 g1095 g1096 g1097) ((lambda (g1098) (g571 g1092 g1089 (map (lambda (g1099) (cons g1090 g1099)) g1097) g1090 g1096 g1098 g1093 (lambda (g1100 g1101) (((lambda () (define g1102 (lambda (g1103 g1104 g1105 g1106 g1107) (if (null? g1103) (((lambda () (define g1108 (lambda (g1109 g1110 g1111) (if (null? g1109) ((lambda (g1112 g1113 g1114) (begin (for-each (lambda (g1115) (apply (lambda (g1116 g1117 g1118 g1119) (if g1117 (g460 g1117 g1118) (void))) g1115)) g1107) (g345 #f (list (g578 g1093 (lambda () (if (null? g1107) (g593) (g345 #f (map (lambda (g1120) (apply (lambda (g1121 g1122 g1123 g1124) (cons (quote $sc-put-cte) (cons (list (quote quote) g1123) (cons (if (eq? g1121 (quote define-syntax-form)) g1124 ((lambda (g1125) (if ((lambda (g1126) ((lambda (g1127) (if g1127 g1127 ((lambda (g1128) (if g1128 g1128 ((lambda (g1129) (if g1129 g1129 (char? g1126))) (string? g1126)))) (number? g1126)))) (boolean? g1126))) g1125) g1125 (list (quote quote) g1125))) (cons (quote $module) (g553 g1124 g1123)))) (quote ((quote *top*))))))) g1120)) g1107))))) (g578 g1093 (lambda () ((lambda (g1130) ((lambda (g1131) ((lambda (g1132) ((lambda () (call-with-values (lambda () (g524 g1130 (g424 (g164 g1095)) g1091)) (lambda (g1133 g1134) (begin (if (not (eq? (g529 g1095 (quote (()))) g1133)) (syntax-error g1089 "definition not permitted") (void)) (if (g241 g1133) (syntax-error g1089 "invalid definition of read-only identifier") (void)) (list (quote $sc-put-cte) (list (quote quote) g1134) g1132 (list (quote quote) (g474 g1091))))))))) ((lambda (g1135) (if ((lambda (g1136) ((lambda (g1137) (if g1137 g1137 ((lambda (g1138) (if g1138 g1138 ((lambda (g1139) (if g1139 g1139 (char? g1136))) (string? g1136)))) (number? g1136)))) (boolean? g1136))) g1135) g1135 (list (quote quote) g1135))) (cons (quote $module) (g553 g1096 g1131))))) (g244 g1130))) ((lambda (g1140) ((lambda (g1141) (if (g230 g1141) (annotation-expression g1141) g1141)) (if (g162 g1140) (g163 g1140) g1140))) g1095)))) (if (null? g1105) (g593) (g345 #f (map (lambda (g1142) (list (quote define) g1142 (g593))) g1105))) (g577 g1094 (lambda () (g347 #f g1110 g1113 (g345 #f (list (if (null? g1105) (g593) (g345 #f (map (lambda (g1143 g1144) (list (quote set!) g1143 g1144)) g1105 g1112))) (if (null? g1114) (g593) (g345 #f g1114))))))) (g593))))) (map (lambda (g1145) (g579 (cdr g1145) (car g1145) (quote (())))) g1106) (map (lambda (g1146) (g579 (cdr g1146) (car g1146) (quote (())))) g1111) (map (lambda (g1147) (g579 (cdr g1147) (car g1147) (quote (())))) g1101)) ((lambda (g1148) ((lambda (g1149) (if (memv g1149 (quote (define-form))) ((lambda (g1150) (begin (g568 g1090 (g459 (g558 g1148)) (cons (quote lexical) g1150)) (g1108 (cdr g1109) (cons g1150 g1110) (cons (g560 g1148) g1111)))) (g598 (g557 g1148))) (if (memv g1149 (quote (define-syntax-form $module-form))) (g1108 (cdr g1109) g1110 g1111) (error (quote sc-expand-internal) "unexpected module binding type")))) (g556 g1148))) (car g1109))))) ((lambda () g1108)))) g1104 (quote ()) (quote ())) ((lambda (g1151 g1152) ((lambda () (define g1153 (lambda (g1154 g1155 g1156 g1157) (((lambda () (define g1158 (lambda (g1159 g1160) (if (null? g1159) (g1157) (if (g530 (g557 (car g1159)) g1154) (g1156 (car g1159) (g517 (reverse g1160) (cdr g1159))) (g1158 (cdr g1159) (cons (car g1159) g1160)))))) ((lambda () g1158)))) g1155 (quote ())))) ((lambda () (g1153 g1151 g1104 (lambda (g1161 g1162) ((lambda (g1163 g1164 g1165) ((lambda (g1166 g1167) ((lambda (g1168) (if (memv g1168 (quote (define-form))) (begin (g460 g1164 g1167) (g1102 g1166 g1162 (cons g1167 g1105) (cons (g560 g1161) g1106) g1107)) (if (memv g1168 (quote (define-syntax-form))) (g1102 g1166 g1162 g1105 g1106 (cons (list g1163 g1164 g1167 (g560 g1161)) g1107)) (if (memv g1168 (quote ($module-form))) ((lambda (g1169) (g1102 (append (g545 g1169) g1166) g1162 g1105 g1106 (cons (list g1163 g1164 g1167 g1169) g1107))) (g560 g1161)) (error (quote sc-expand-internal) "unexpected module binding type"))))) g1163)) (append g1165 g1152) (g244 ((lambda (g1170) ((lambda (g1171) (if (g230 g1171) (annotation-expression g1171) g1171)) (if (g162 g1170) (g163 g1170) g1170))) g1151)))) (g556 g1161) (g558 g1161) (g559 g1161))) (lambda () (g1102 g1152 g1104 g1105 g1106 g1107)))))))) (car g1103) (cdr g1103))))) ((lambda () g1102)))) g1098 g1100 (quote ()) (quote ()) (quote ()))))) (g545 g1096)))) (define g567 (lambda (g1172 g1173) (if (null? g1172) (quote ()) (if (g536 (car g1172) g1173) (g567 (cdr g1172) g1173) (cons (car g1172) (g567 (cdr g1172) g1173)))))) (define g568 (lambda (g1174 g1175 g1176) (set-cdr! g1174 (g403 g1175 g1176 (cdr g1174))))) (define g569 (lambda (g1177 g1178 g1179) ((lambda () (define g1180 (lambda (g1181 g1182) (ormap (lambda (g1183) (if (g547 g1183) ((lambda (g1184) (if g1184 (g511 ((lambda (g1185) ((lambda (g1186) (if (g230 g1186) (annotation-expression g1186) g1186)) (if (g162 g1185) (g163 g1185) g1185))) g1181) g1184 (g424 (g164 g1181))) ((lambda (g1187) (((lambda () (define g1188 (lambda (g1189) (if (>= g1189 0) ((lambda (g1190) (if g1190 g1190 (g1188 (- g1189 1)))) (g532 g1181 (vector-ref g1187 g1189))) #f))) ((lambda () g1188)))) (- (vector-length g1187) 1))) (g548 g1183)))) (g549 g1183)) (g532 g1181 g1183))) g1182))) ((lambda () (((lambda () (define g1191 (lambda (g1192 g1193) (if (null? g1192) (if (not (null? g1193)) (syntax-error g1193 "missing definition for export(s)") (void)) ((lambda (g1194 g1195) (if (g1180 g1194 g1179) (g1191 g1195 g1193) (g1191 g1195 (cons g1194 g1193)))) (car g1192) (cdr g1192))))) ((lambda () g1191)))) g1178 (quote ())))))))) (define g570 (lambda (g1196 g1197) ((lambda () (define g1198 (lambda (g1202 g1203) (if (symbol? g1202) (if (symbol? g1203) (eq? g1202 g1203) (if (eq? g1202 ((lambda (g1204) ((lambda (g1205) (if (g230 g1205) (annotation-expression g1205) g1205)) (if (g162 g1204) (g163 g1204) g1204))) g1203)) (g521 (g424 (g164 g1203)) (g424 (quote ((top))))) #f)) (if (symbol? g1203) (if (eq? g1203 ((lambda (g1206) ((lambda (g1207) (if (g230 g1207) (annotation-expression g1207) g1207)) (if (g162 g1206) (g163 g1206) g1206))) g1202)) (g521 (g424 (g164 g1202)) (g424 (quote ((top))))) #f) (g532 g1202 g1203))))) (define g1199 (lambda (g1208 g1209 g1210) ((lambda (g1211) (((lambda () (define g1212 (lambda (g1213 g1214) (if (= g1213 g1211) g1214 (g1212 (+ g1213 1) (g1209 (vector-ref g1208 g1213) g1214))))) ((lambda () g1212)))) 0 g1210)) (vector-length g1208)))) (define g1200 (lambda (g1215 g1216 g1217) (if (g547 g1215) (if (g547 g1216) (call-with-values (lambda () ((lambda (g1218 g1219) (if (> (vector-length g1218) (vector-length g1219)) (values g1215 g1219) (values g1216 g1218))) (g548 g1215) (g548 g1216))) (lambda (g1220 g1221) (g1199 g1221 (lambda (g1222 g1223) (g1201 g1222 g1220 g1223)) g1217))) (g1201 g1216 g1215 g1217)) (if (g547 g1216) (g1201 g1215 g1216 g1217) (if (g1198 g1215 g1216) (cons g1215 g1217) g1217))))) (define g1201 (lambda (g1224 g1225 g1226) ((lambda (g1227) (if g1227 (if (g511 ((lambda (g1228) ((lambda (g1229) (if (g230 g1229) (annotation-expression g1229) g1229)) (if (g162 g1228) (g163 g1228) g1228))) g1224) g1227 (if (symbol? g1224) (g424 (quote ((top)))) (g424 (g164 g1224)))) (cons g1224 g1226) g1226) (g1199 (g548 g1225) (lambda (g1230 g1231) (if (g1198 g1230 g1224) (cons g1230 g1231) g1231)) g1226))) (g549 g1225)))) ((lambda () (if (not (null? g1197)) (((lambda () (define g1232 (lambda (g1233 g1234 g1235) (if (null? g1234) (if (not (null? g1235)) ((lambda (g1236) (syntax-error g1196 "duplicate definition for " (symbol->string (car g1236)) " in")) (syntax-object->datum g1235)) (void)) (((lambda () (define g1237 (lambda (g1238 g1239) (if (null? g1238) (g1232 (car g1234) (cdr g1234) g1239) (g1237 (cdr g1238) (g1200 g1233 (car g1238) g1239))))) ((lambda () g1237)))) g1234 g1235)))) ((lambda () g1232)))) (car g1197) (cdr g1197) (quote ())) (void)))))))) (define g571 (lambda (g1240 g1241 g1242 g1243 g1244 g1245 g1246 g1247) ((lambda () (define g1248 (lambda (g1251 g1252 g1253) (begin (g570 g1241 g1252) (g569 g1241 g1245 g1252) (g1247 g1251 g1253)))) (define g1249 (lambda (g1254) (((lambda () (define g1255 (lambda (g1256) (if (null? g1256) (quote ()) (if (if (pair? (car g1256)) (g532 g1254 (caar g1256)) #f) (g545 (cdar g1256)) (g1255 (cdr g1256)))))) ((lambda () g1255)))) g1244))) (define g1250 (lambda (g1257 g1258) ((lambda (g1259) (map (lambda (g1260) ((lambda (g1261) (if (not (g536 g1261 g1259)) g1260 (g554 (g556 g1260) g1261 (g558 g1260) (append (g1249 g1261) (g559 g1260)) (g560 g1260)))) (g557 g1260))) g1257)) (map (lambda (g1262) (if (pair? g1262) (car g1262) g1262)) g1258)))) ((lambda () (((lambda () (define g1263 (lambda (g1264 g1265 g1266 g1267) (if (null? g1264) (g1248 g1266 g1265 g1267) ((lambda (g1268 g1269) (call-with-values (lambda () (g542 g1268 g1269 (quote (())) #f g1240)) (lambda (g1270 g1271 g1272 g1273 g1274) ((lambda (g1275) (if (memv g1275 (quote (define-form))) (g589 g1272 g1273 g1274 (lambda (g1276 g1277 g1278) ((lambda (g1279) ((lambda (g1280) ((lambda (g1281) ((lambda () (begin (g507 g1240 g1279 g1280) (g1263 (cdr g1264) (cons g1279 g1265) (cons (g554 g1270 g1279 g1280 g1281 (cons g1269 (g537 g1277 g1278))) g1266) g1267))))) (g1249 g1279))) (g458))) (g537 g1276 g1278)))) (if (memv g1275 (quote (define-syntax-form))) (g590 g1272 g1273 g1274 (lambda (g1282 g1283 g1284) ((lambda (g1285) ((lambda (g1286) ((lambda (g1287) ((lambda (g1288) ((lambda () (begin (g568 g1243 (g459 g1286) (g413 g1288)) (g507 g1240 g1285 g1286) (g1263 (cdr g1264) (cons g1285 g1265) (cons (g554 g1270 g1285 g1286 g1287 g1288) g1266) g1267))))) (g579 g1283 (g406 g1269) g1284))) (g1249 g1285))) (g458))) (g537 g1282 g1284)))) (if (memv g1275 (quote ($module-form))) ((lambda (g1289) ((lambda (g1290) ((lambda () (g587 g1272 g1273 g1274 g1290 (lambda (g1291 g1292 g1293 g1294) (g571 g1289 g1291 (map (lambda (g1295) (cons g1269 g1295)) g1294) g1243 g1293 (g545 g1293) g1246 (lambda (g1296 g1297) ((lambda (g1298) ((lambda (g1299) ((lambda (g1300) ((lambda () ((lambda (g1301 g1302) (begin (g568 g1243 (g459 g1301) (cons (quote $module) g1298)) (g507 g1240 g1292 g1301) (g1263 (cdr g1264) (cons g1292 g1265) (cons (g554 g1270 g1292 g1301 g1302 g1293) g1299) g1300))) (g458) (g1249 g1292))))) (append g1267 g1297))) (append g1296 g1266))) (g552 g1293))))))))) (g423 (g424 g1273) (cons g1289 (g425 g1273))))) (g464 (quote ()) (quote ()) (quote ()))) (if (memv g1275 (quote ($import-form))) (g588 g1272 g1273 g1274 (lambda (g1303 g1304) ((lambda (g1305) ((lambda (g1306) ((lambda (g1307) (if (memv g1307 (quote ($module))) ((lambda (g1308) (begin (if g1271 (g508 g1240 g1304) (void)) (g586 g1308 g1240) (g1263 (cdr g1264) (cons g1308 g1265) (g1250 g1266 (vector->list (g548 g1308))) g1267))) (g390 g1306)) (if (memv g1307 (quote (displaced-lexical))) (g408 g1304) (syntax-error g1304 "import from unknown module")))) (g389 g1306))) (g411 g1305 g1243))) (g529 g1304 (quote (())))))) (if (memv g1275 (quote (begin-form))) ((lambda (g1309) ((lambda (g1310) (if g1310 (apply (lambda (g1311 g1312) (g1263 (((lambda () (define g1313 (lambda (g1314) (if (null? g1314) (cdr g1264) (cons (cons g1269 (g537 (car g1314) g1273)) (g1313 (cdr g1314)))))) ((lambda () g1313)))) g1312) g1265 g1266 g1267)) g1310) (syntax-error g1309))) ($syntax-dispatch g1309 (quote (any . each-any))))) g1272) (if (memv g1275 (quote (eval-when-form))) ((lambda (g1316) ((lambda (g1317) (if g1317 (apply (lambda (g1318 g1319 g1320) (g1263 (if (memq (quote eval) (g541 g1319 g1273)) (((lambda () (define g1322 (lambda (g1323) (if (null? g1323) (cdr g1264) (cons (cons g1269 (g537 (car g1323) g1273)) (g1322 (cdr g1323)))))) ((lambda () g1322)))) g1320) (cdr g1264)) g1265 g1266 g1267)) g1317) (syntax-error g1316))) ($syntax-dispatch g1316 (quote (any each-any . each-any))))) g1272) (if (memv g1275 (quote (local-syntax-form))) (g592 g1271 g1272 g1269 g1273 g1274 (lambda (g1325 g1326 g1327 g1328) (g1263 (((lambda () (define g1329 (lambda (g1330) (if (null? g1330) (cdr g1264) (cons (cons g1326 (g537 (car g1330) g1327)) (g1329 (cdr g1330)))))) ((lambda () g1329)))) g1325) g1265 g1266 g1267))) (g1248 g1266 g1265 (append g1267 (cons (cons g1269 (g538 g1272 g1273 g1274)) (cdr g1264)))))))))))) g1270)))) (cdar g1264) (caar g1264))))) ((lambda () g1263)))) g1242 (quote ()) (quote ()) (quote ())))))))) (define g572 (lambda (g1331 g1332) (((lambda () (define g1333 (lambda (g1334 g1335) (if (< g1334 0) g1335 (g1333 (- g1334 1) (cons (g1331 (vector-ref g1332 g1334)) g1335))))) ((lambda () g1333)))) (- (vector-length g1332) 1) (quote ())))) (define g573 (lambda (g1336 g1337) ((lambda (g1338) (((lambda () (define g1339 (lambda (g1340) (if (not (= g1340 g1338)) (begin (g1336 (vector-ref g1337 g1340)) (g1339 (+ g1340 1))) (void)))) ((lambda () g1339)))) 0)) (vector-length g1337)))) (define g574 (lambda (g1341 g1342 g1343 g1344) (list (quote $sc-put-cte) (list (quote quote) g1343) ((lambda (g1345) (if ((lambda (g1346) ((lambda (g1347) (if g1347 g1347 ((lambda (g1348) (if g1348 g1348 ((lambda (g1349) (if g1349 g1349 (char? g1346))) (string? g1346)))) (number? g1346)))) (boolean? g1346))) g1345) g1345 (list (quote quote) g1345))) (cons (quote do-import) (cons g1341 g1344))) (list (quote quote) (g474 g1342))))) (define g575 ((lambda (g1350) (lambda (g1351 g1352) (remq (quote -) (apply append (map (lambda (g1353) ((lambda (g1354) (map (lambda (g1355) (cdr (assq g1355 g1354))) g1351)) (cdr (assq g1353 g1350)))) g1352))))) (quote ((l (load . l) (compile . c) (visit . v) (revisit . r) (eval . -)) (c (load . -) (compile . -) (visit . -) (revisit . -) (eval . c)) (v (load . v) (compile . c) (visit . v) (revisit . -) (eval . -)) (r (load . r) (compile . c) (visit . -) (revisit . r) (eval . -)) (e (load . -) (compile . -) (visit . -) (revisit . -) (eval . e)))))) (define g576 (lambda (g1356 g1357) (apply append (map (lambda (g1358) (if g1357 ((lambda (g1359) (if (memv g1359 (quote (compile))) (quote (c)) (if (memv g1359 (quote (load))) (quote (l)) (if (memv g1359 (quote (visit))) (quote (v)) (if (memv g1359 (quote (revisit))) (quote (r)) (quote ())))))) g1358) ((lambda (g1360) (if (memv g1360 (quote (eval))) (quote (e)) (quote ()))) g1358))) g1356)))) (define g577 (lambda (g1361 g1362) (if (memq (quote e) g1361) (g1362) ((lambda (g1363) (if (memq (quote v) g1361) (if ((lambda (g1364) (if g1364 g1364 (memq (quote r) g1361))) (memq (quote l) g1361)) (g1363) (g1363)) (if ((lambda (g1365) (if g1365 g1365 (memq (quote r) g1361))) (memq (quote l) g1361)) (g1363) (g593)))) (if (memq (quote c) g1361) ((lambda (g1366) (begin (g231 g1366) (lambda () g1366))) (g1362)) g1362))))) (define g578 (lambda (g1367 g1368) (if (memq (quote e) g1367) (begin (g231 (g1368)) (g593)) ((lambda (g1369) (if (memq (quote r) g1367) (if ((lambda (g1370) (if g1370 g1370 (memq (quote v) g1367))) (memq (quote l) g1367)) (g1369) (g1369)) (if ((lambda (g1371) (if g1371 g1371 (memq (quote v) g1367))) (memq (quote l) g1367)) (g1369) (g593)))) (if (memq (quote c) g1367) ((lambda (g1372) (begin (g231 g1372) (lambda () g1372))) (g1368)) g1368))))) (define g579 (lambda (g1373 g1374 g1375) (call-with-values (lambda () (g542 g1373 g1374 g1375 #f #f)) (lambda (g1376 g1377 g1378 g1379 g1380) (g580 g1376 g1377 g1378 g1374 g1379 g1380))))) (define g580 (lambda (g1381 g1382 g1383 g1384 g1385 g1386) ((lambda (g1387) (if (memv g1387 (quote (lexical))) g1382 (if (memv g1387 (quote (core))) (g1382 g1383 g1384 g1385 g1386) (if (memv g1387 (quote (lexical-call))) (g581 g1382 g1383 g1384 g1385 g1386) (if (memv g1387 (quote (constant))) ((lambda (g1388) (if ((lambda (g1389) ((lambda (g1390) (if g1390 g1390 ((lambda (g1391) (if g1391 g1391 ((lambda (g1392) (if g1392 g1392 (char? g1389))) (string? g1389)))) (number? g1389)))) (boolean? g1389))) g1388) g1388 (list (quote quote) g1388))) (g597 (g538 g1383 g1385 g1386) (quote (())))) (if (memv g1387 (quote (global))) g1382 (if (memv g1387 (quote (call))) (g581 (g579 (car g1383) g1384 g1385) g1383 g1384 g1385 g1386) (if (memv g1387 (quote (begin-form))) ((lambda (g1393) ((lambda (g1394) (if g1394 (apply (lambda (g1395 g1396 g1397) (g539 (cons g1396 g1397) g1384 g1385 g1386)) g1394) (syntax-error g1393))) ($syntax-dispatch g1393 (quote (any any . each-any))))) g1383) (if (memv g1387 (quote (local-syntax-form))) (g592 g1382 g1383 g1384 g1385 g1386 g539) (if (memv g1387 (quote (eval-when-form))) ((lambda (g1399) ((lambda (g1400) (if g1400 (apply (lambda (g1401 g1402 g1403 g1404) (if (memq (quote eval) (g541 g1402 g1385)) (g539 (cons g1403 g1404) g1384 g1385 g1386) (g593))) g1400) (syntax-error g1399))) ($syntax-dispatch g1399 (quote (any each-any any . each-any))))) g1383) (if (memv g1387 (quote (define-form define-syntax-form $module-form $import-form))) (syntax-error (g538 g1383 g1385 g1386) "invalid context for definition") (if (memv g1387 (quote (syntax))) (syntax-error (g538 g1383 g1385 g1386) "reference to pattern variable outside syntax form") (if (memv g1387 (quote (displaced-lexical))) (g408 (g538 g1383 g1385 g1386)) (syntax-error (g538 g1383 g1385 g1386))))))))))))))) g1381))) (define g581 (lambda (g1407 g1408 g1409 g1410 g1411) ((lambda (g1412) ((lambda (g1413) (if g1413 (apply (lambda (g1414 g1415) (cons g1407 (map (lambda (g1416) (g579 g1416 g1409 g1410)) g1415))) g1413) ((lambda (g1418) (syntax-error (g538 g1408 g1410 g1411))) g1412))) ($syntax-dispatch g1412 (quote (any . each-any))))) g1408))) (define g582 (lambda (g1419 g1420 g1421 g1422 g1423) ((lambda (g1424) ((lambda (g1425) (if (if g1425 (apply (lambda (g1426 g1427 g1428) (g416 g1427)) g1425) #f) (apply (lambda (g1429 g1430 g1431) ((lambda (g1432) ((lambda (g1433) ((lambda (g1434) (if (memv g1434 (quote (macro!))) ((lambda (g1435 g1436) (g542 (g583 (g390 g1433) (list (quote #3(syntax-object set! ((top) #4(ribcage ()) #4(ribcage #2(id val) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(t) #1(("m" top)) #1("i")) #4(ribcage ()) #4(ribcage #1(b) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(n) #1((top)) #1("i")) #4(ribcage #3(_ id val) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #5(e r w ae rib) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g1435 g1436) g1420 (quote (())) #f g1423) g1420 (quote (())) #f g1423)) (g537 g1430 g1421) (g537 g1431 g1421)) (values (quote core) (lambda (g1437 g1438 g1439 g1440) ((lambda (g1441 g1442) ((lambda (g1443) ((lambda (g1444) (if (memv g1444 (quote (lexical))) (list (quote set!) (g390 g1443) g1441) (if (memv g1444 (quote (global))) ((lambda (g1445) (begin (if (g241 g1442) (syntax-error (g538 g1437 g1439 g1440) "invalid assignment to read-only variable") (void)) (list (quote set!) g1445 g1441))) (g390 g1443)) (if (memv g1444 (quote (displaced-lexical))) (syntax-error (g537 g1430 g1439) "identifier out of context") (syntax-error (g538 g1437 g1439 g1440)))))) (g389 g1443))) (g411 g1442 g1438))) (g579 g1431 g1438 g1439) (g529 g1430 g1439))) g1419 g1421 g1422))) (g389 g1433))) (g411 g1432 g1420))) (g529 g1430 g1421))) g1425) ((lambda (g1446) (syntax-error (g538 g1419 g1421 g1422))) g1424))) ($syntax-dispatch g1424 (quote (any any any))))) g1419))) (define g583 (lambda (g1447 g1448 g1449 g1450 g1451 g1452) ((lambda () (define g1453 (lambda (g1454 g1455) (if (pair? g1454) (cons (g1453 (car g1454) g1455) (g1453 (cdr g1454) g1455)) (if (g162 g1454) ((lambda (g1456) ((lambda (g1457 g1458) (g161 (g163 g1454) (if (if (pair? g1457) (eq? (car g1457) #f) #f) (g423 (cdr g1457) (cdr g1458)) (g423 (cons g1455 g1457) (if g1452 (cons g1452 (cons (quote shift) g1458)) (cons (quote shift) g1458)))))) (g424 g1456) (g425 g1456))) (g164 g1454)) (if (vector? g1454) ((lambda (g1459) ((lambda (g1460) ((lambda () (((lambda () (define g1461 (lambda (g1462) (if (= g1462 g1459) g1460 (begin (vector-set! g1460 g1462 (g1453 (vector-ref g1454 g1462) g1455)) (g1461 (+ g1462 1)))))) ((lambda () g1461)))) 0)))) (make-vector g1459))) (vector-length g1454)) (if (symbol? g1454) (syntax-error (g538 g1448 g1450 g1451) "encountered raw symbol " (format "~s" g1454) " in output of macro") g1454)))))) ((lambda () (g1453 ((lambda (g1463) (if (procedure? g1463) (g1463 (lambda (g1464) (begin (if (not (identifier? g1464)) (syntax-error g1464 "environment argument is not an identifier") (void)) (g411 (g529 g1464 (quote (()))) g1449)))) g1463)) (g1447 (g538 g1448 (g497 g1450) g1451))) (string #\m)))))))) (define g584 (lambda (g1465 g1466 g1467 g1468) ((lambda (g1469) ((lambda (g1470) ((lambda (g1471) ((lambda (g1472) ((lambda () (g585 g1470 g1466 g1472 g1469 (lambda (g1473 g1474 g1475 g1476 g1477) (begin (if (null? g1473) (syntax-error g1466 "no expressions in body") (void)) (g347 #f g1475 (map (lambda (g1478) (g579 (cdr g1478) (car g1478) (quote (())))) g1476) (g345 #f (map (lambda (g1479) (g579 (cdr g1479) (car g1479) (quote (())))) (append g1477 g1473)))))))))) (map (lambda (g1480) (cons g1469 (g537 g1480 g1471))) g1465))) (g423 (g424 g1468) (cons g1470 (g425 g1468))))) (g464 (quote ()) (quote ()) (quote ())))) (cons (quote ("placeholder" placeholder)) g1467)))) (define g585 (lambda (g1481 g1482 g1483 g1484 g1485) ((lambda () (define g1486 (lambda (g1487 g1488 g1489 g1490 g1491) (begin (g570 g1482 g1488) (g1485 g1487 g1488 (reverse g1489) (reverse g1490) g1491)))) ((lambda () (((lambda () (define g1492 (lambda (g1493 g1494 g1495 g1496 g1497) (if (null? g1493) (g1486 g1493 g1494 g1495 g1496 g1497) ((lambda (g1498 g1499) (call-with-values (lambda () (g542 g1498 g1499 (quote (())) #f g1481)) (lambda (g1500 g1501 g1502 g1503 g1504) ((lambda (g1505) (if (memv g1505 (quote (define-form))) (g589 g1502 g1503 g1504 (lambda (g1506 g1507 g1508) ((lambda (g1509 g1510) ((lambda (g1511) (begin (g507 g1481 g1509 g1510) (g568 g1484 g1510 (cons (quote lexical) g1511)) (g1492 (cdr g1493) (cons g1509 g1494) (cons g1511 g1495) (cons (cons g1499 (g537 g1507 g1508)) g1496) g1497))) (g598 g1509))) (g537 g1506 g1508) (g461)))) (if (memv g1505 (quote (define-syntax-form))) (g590 g1502 g1503 g1504 (lambda (g1512 g1513 g1514) ((lambda (g1515 g1516 g1517) (begin (g507 g1481 g1515 g1516) (g568 g1484 g1516 (g413 g1517)) (g1492 (cdr g1493) (cons g1515 g1494) g1495 g1496 g1497))) (g537 g1512 g1514) (g461) (g579 g1513 (g406 g1499) g1514)))) (if (memv g1505 (quote ($module-form))) ((lambda (g1518) ((lambda (g1519) ((lambda () (g587 g1502 g1503 g1504 g1519 (lambda (g1520 g1521 g1522 g1523) (g585 g1518 g1520 (map (lambda (g1524) (cons g1499 g1524)) g1523) g1484 (lambda (g1525 g1526 g1527 g1528 g1529) (begin (g569 g1482 (g545 g1522) g1526) ((lambda (g1530 g1531 g1532 g1533) ((lambda (g1534) (begin (g507 g1481 g1521 g1534) (g568 g1484 g1534 (cons (quote $module) g1530)) (g1492 (cdr g1493) (cons g1521 g1494) g1531 g1532 g1533))) (g461))) (g552 g1522) (append g1527 g1495) (append g1528 g1496) (append g1497 g1529 g1525)))))))))) (g423 (g424 g1503) (cons g1518 (g425 g1503))))) (g464 (quote ()) (quote ()) (quote ()))) (if (memv g1505 (quote ($import-form))) (g588 g1502 g1503 g1504 (lambda (g1535 g1536) ((lambda (g1537) ((lambda (g1538) ((lambda (g1539) (if (memv g1539 (quote ($module))) ((lambda (g1540) (begin (if g1501 (g508 g1481 g1536) (void)) (g586 g1540 g1481) (g1492 (cdr g1493) (cons g1540 g1494) g1495 g1496 g1497))) (cdr g1538)) (if (memv g1539 (quote (displaced-lexical))) (g408 g1536) (syntax-error g1536 "import from unknown module")))) (car g1538))) (g411 g1537 g1484))) (g529 g1536 (quote (())))))) (if (memv g1505 (quote (begin-form))) ((lambda (g1541) ((lambda (g1542) (if g1542 (apply (lambda (g1543 g1544) (g1492 (((lambda () (define g1545 (lambda (g1546) (if (null? g1546) (cdr g1493) (cons (cons g1499 (g537 (car g1546) g1503)) (g1545 (cdr g1546)))))) ((lambda () g1545)))) g1544) g1494 g1495 g1496 g1497)) g1542) (syntax-error g1541))) ($syntax-dispatch g1541 (quote (any . each-any))))) g1502) (if (memv g1505 (quote (eval-when-form))) ((lambda (g1548) ((lambda (g1549) (if g1549 (apply (lambda (g1550 g1551 g1552) (g1492 (if (memq (quote eval) (g541 g1551 g1503)) (((lambda () (define g1554 (lambda (g1555) (if (null? g1555) (cdr g1493) (cons (cons g1499 (g537 (car g1555) g1503)) (g1554 (cdr g1555)))))) ((lambda () g1554)))) g1552) (cdr g1493)) g1494 g1495 g1496 g1497)) g1549) (syntax-error g1548))) ($syntax-dispatch g1548 (quote (any each-any . each-any))))) g1502) (if (memv g1505 (quote (local-syntax-form))) (g592 g1501 g1502 g1499 g1503 g1504 (lambda (g1557 g1558 g1559 g1560) (g1492 (((lambda () (define g1561 (lambda (g1562) (if (null? g1562) (cdr g1493) (cons (cons g1558 (g537 (car g1562) g1559)) (g1561 (cdr g1562)))))) ((lambda () g1561)))) g1557) g1494 g1495 g1496 g1497))) (g1486 (cons (cons g1499 (g538 g1502 g1503 g1504)) (cdr g1493)) g1494 g1495 g1496 g1497))))))))) g1500)))) (cdar g1493) (caar g1493))))) ((lambda () g1492)))) g1483 (quote ()) (quote ()) (quote ()) (quote ())))))))) (define g586 (lambda (g1563 g1564) ((lambda (g1565) (if g1565 (g510 g1564 g1565) (g573 (lambda (g1566) ((lambda (g1567) (begin (if (not g1567) (syntax-error g1566 "exported identifier not visible") (void)) (g507 g1564 g1566 g1567))) (g528 g1566 (quote (()))))) (g548 g1563)))) (g549 g1563)))) (define g587 (lambda (g1568 g1569 g1570 g1571 g1572) ((lambda () (define g1573 (lambda (g1574) (if (null? g1574) (quote ()) (cons ((lambda (g1575) ((lambda (g1576) (if g1576 (apply (lambda (g1577) (g1573 g1577)) g1576) ((lambda (g1579) (if (g416 g1579) (g537 g1579 g1571) (syntax-error (g538 g1568 g1569 g1570) "invalid exports list in"))) g1575))) ($syntax-dispatch g1575 (quote each-any)))) (car g1574)) (g1573 (cdr g1574)))))) ((lambda () ((lambda (g1580) ((lambda (g1581) (if (if g1581 (apply (lambda (g1582 g1583 g1584 g1585 g1586) (g416 g1584)) g1581) #f) (apply (lambda (g1587 g1588 g1589 g1590 g1591) (g1572 g1588 (g537 g1589 g1569) (g1573 g1590) (map (lambda (g1593) (g537 g1593 g1571)) g1591))) g1581) ((lambda (g1595) (syntax-error (g538 g1568 g1569 g1570))) g1580))) ($syntax-dispatch g1580 (quote (any any any each-any . each-any))))) g1568))))))) (define g588 (lambda (g1596 g1597 g1598 g1599) ((lambda (g1600) ((lambda (g1601) (if (if g1601 (apply (lambda (g1602 g1603 g1604) (g416 g1604)) g1601) #f) (apply (lambda (g1605 g1606 g1607) (g1599 g1606 (g537 g1607 g1597))) g1601) ((lambda (g1608) (syntax-error (g538 g1596 g1597 g1598))) g1600))) ($syntax-dispatch g1600 (quote (any any any))))) g1596))) (define g589 (lambda (g1609 g1610 g1611 g1612) ((lambda (g1613) ((lambda (g1614) (if (if g1614 (apply (lambda (g1615 g1616 g1617) (g416 g1616)) g1614) #f) (apply (lambda (g1618 g1619 g1620) (g1612 g1619 g1620 g1610)) g1614) ((lambda (g1621) (if (if g1621 (apply (lambda (g1622 g1623 g1624 g1625 g1626) (if (g416 g1623) (g533 (g599 g1624)) #f)) g1621) #f) (apply (lambda (g1627 g1628 g1629 g1630 g1631) (g1612 (g537 g1628 g1610) (cons (quote #3(syntax-object lambda ((top) #4(ribcage #5(_ name args e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #4(e w ae k) #4((top)) #4("i" "i" "i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (g537 (cons g1629 (cons g1630 g1631)) g1610)) (quote (())))) g1621) ((lambda (g1633) (if (if g1633 (apply (lambda (g1634 g1635) (g416 g1635)) g1633) #f) (apply (lambda (g1636 g1637) (g1612 (g537 g1637 g1610) (quote #3(syntax-object (void) ((top) #4(ribcage #2(_ name) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #4(e w ae k) #4((top)) #4("i" "i" "i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (quote (())))) g1633) ((lambda (g1638) (syntax-error (g538 g1609 g1610 g1611))) g1613))) ($syntax-dispatch g1613 (quote (any any)))))) ($syntax-dispatch g1613 (quote (any (any . any) any . each-any)))))) ($syntax-dispatch g1613 (quote (any any any))))) g1609))) (define g590 (lambda (g1639 g1640 g1641 g1642) ((lambda (g1643) ((lambda (g1644) (if (if g1644 (apply (lambda (g1645 g1646 g1647 g1648 g1649) (if (g416 g1646) (g416 g1647) #f)) g1644) #f) (apply (lambda (g1650 g1651 g1652 g1653 g1654) (g1642 (g537 g1651 g1640) (list* (quote #3(syntax-object lambda ((top) #4(ribcage #5(_ name id e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #4(e w ae k) #4((top)) #4("i" "i" "i" "i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (g537 (list g1652) g1640) (g537 (cons g1653 g1654) g1640)) (quote (())))) g1644) ((lambda (g1656) (if (if g1656 (apply (lambda (g1657 g1658 g1659) (g416 g1658)) g1656) #f) (apply (lambda (g1660 g1661 g1662) (g1642 g1661 g1662 g1640)) g1656) ((lambda (g1663) (syntax-error (g538 g1639 g1640 g1641))) g1643))) ($syntax-dispatch g1643 (quote (any any any)))))) ($syntax-dispatch g1643 (quote (any (any any) any . each-any))))) g1639))) (define g591 (lambda (g1664 g1665 g1666 g1667 g1668) ((lambda (g1669) ((lambda (g1670) (if g1670 (apply (lambda (g1671 g1672 g1673) ((lambda (g1674) (if (not (g533 g1674)) (syntax-error g1664 "invalid parameter list in") ((lambda (g1675 g1676) (g1668 g1676 (g584 (cons g1672 g1673) g1664 (g405 g1675 g1676 g1666) (g513 g1674 g1675 g1667)))) (g463 g1674) (map g598 g1674)))) g1671)) g1670) ((lambda (g1679) (if g1679 (apply (lambda (g1680 g1681 g1682) ((lambda (g1683) (if (not (g533 g1683)) (syntax-error g1664 "invalid parameter list in") ((lambda (g1684 g1685) (g1668 (((lambda () (define g1686 (lambda (g1687 g1688) (if (null? g1687) g1688 (g1686 (cdr g1687) (cons (car g1687) g1688))))) ((lambda () g1686)))) (cdr g1685) (car g1685)) (g584 (cons g1681 g1682) g1664 (g405 g1684 g1685 g1666) (g513 g1683 g1684 g1667)))) (g463 g1683) (map g598 g1683)))) (g599 g1680))) g1679) ((lambda (g1690) (syntax-error g1664)) g1669))) ($syntax-dispatch g1669 (quote (any any . each-any)))))) ($syntax-dispatch g1669 (quote (each-any any . each-any))))) g1665))) (define g592 (lambda (g1691 g1692 g1693 g1694 g1695 g1696) ((lambda (g1697) ((lambda (g1698) (if g1698 (apply (lambda (g1699 g1700 g1701 g1702 g1703) ((lambda (g1704) (if (not (g533 g1704)) (g535 (map (lambda (g1705) (g537 g1705 g1694)) g1704) (g538 g1692 g1694 g1695) "keyword") ((lambda (g1706) ((lambda (g1707) (g1696 (cons g1702 g1703) (g404 g1706 ((lambda (g1709 g1710) (map (lambda (g1711) (g413 (g579 g1711 g1710 g1709))) g1701)) (if g1691 g1707 g1694) (g406 g1693)) g1693) g1707 g1695)) (g513 g1704 g1706 g1694))) (g463 g1704)))) g1700)) g1698) ((lambda (g1714) (syntax-error (g538 g1692 g1694 g1695))) g1697))) ($syntax-dispatch g1697 (quote (any #2(each (any any)) any . each-any))))) g1692))) (define g593 (lambda () (list (quote void)))) (define g594 (lambda (g1715) (if (g415 g1715) (g531 g1715 (quote #3(syntax-object ... ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-define-syntax parse-define parse-import parse-module do-import! chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi ct-eval/residualize rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports extend-store! id-set-diff chi-top-module set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-trimmed-interface set-interface-token! set-interface-exports! interface-token interface-exports interface? make-interface flatten-exports chi-top chi-top-expr syntax-type chi-when-list chi-top-sequence chi-sequence source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-token-key! import-token-key import-token? make-import-token set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup sanitize-binding lookup* displaced-lexical-error displaced-lexical? transformer-env extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding arg-check no-source unannotate self-evaluating? build-lexical-var build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-module-definition build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) #f))) (define g595 (lambda (g1716) (if (pair? g1716) (cons (g595 (car g1716)) (g595 (cdr g1716))) (if (g230 g1716) (annotation-stripped g1716) g1716)))) (define g596 (lambda (g1717 g1718 g1719) (if (memq (quote top) (g424 g1718)) (g1719 g1717) (((lambda () (define g1720 (lambda (g1721) (if (g162 g1721) (g596 (g163 g1721) (g164 g1721) g1719) (if (pair? g1721) ((lambda (g1722 g1723) (if (if (eq? g1722 (car g1721)) (eq? g1723 (cdr g1721)) #f) g1721 (cons g1722 g1723))) (g1720 (car g1721)) (g1720 (cdr g1721))) (if (vector? g1721) ((lambda (g1724) ((lambda (g1725) (if (andmap eq? g1724 g1725) g1721 (list->vector g1725))) (map g1720 g1724))) (vector->list g1721)) g1721))))) ((lambda () g1720)))) g1717)))) (define g597 (lambda (g1726 g1727) (g596 g1726 g1727 (lambda (g1728) (if ((lambda (g1729) (if g1729 g1729 (if (pair? g1728) (g230 (car g1728)) #f))) (g230 g1728)) (g595 g1728) g1728))))) (define g598 (lambda (g1730) ((lambda (g1731) (if (g230 g1731) (gensym) (gensym))) (if (g162 g1730) (g163 g1730) g1730)))) (define g599 (lambda (g1732) (((lambda () (define g1733 (lambda (g1734 g1735 g1736) (if (pair? g1734) (g1733 (cdr g1734) (cons (g537 (car g1734) g1736) g1735) g1736) (if (g416 g1734) (cons (g537 g1734 g1736) g1735) (if (null? g1734) g1735 (if (g162 g1734) (g1733 (g163 g1734) g1735 (g518 g1736 (g164 g1734))) (if (g230 g1734) (g1733 (annotation-expression g1734) g1735 g1736) (cons g1734 g1735)))))))) ((lambda () g1733)))) g1732 (quote ()) (quote (()))))) ((lambda () (begin (set! $sc-put-cte (lambda (g1737 g1738 g1739) ((lambda () (define g1740 (lambda (g1742 g1743) (g573 (lambda (g1744) (g512 g1744 g1743)) g1742))) (define g1741 (lambda (g1745 g1746 g1747) ((lambda (g1748) (g240 g1748 (if (if (eq? (g389 g1746) (quote global)) (eq? (g390 g1746) g1748) #f) #f g1746))) (if (symbol? g1745) g1745 (g529 g1745 (quote (()))))))) ((lambda () ((lambda (g1749) ((lambda (g1750) (if (memv g1750 (quote ($module))) (begin ((lambda (g1751) (g1740 (g548 g1751) (g549 g1751))) (g390 g1749)) (g1741 g1737 g1749 g1739)) (if (memv g1750 (quote (do-import))) ((lambda (g1752 g1753) ((lambda (g1754) ((lambda (g1755) (if (memv g1755 (quote ($module))) ((lambda (g1756) ((lambda (g1757) ((lambda () (begin (if (not (eq? (g549 g1756) g1753)) (syntax-error g1737 "import mismatch for module") (void)) (g1740 g1757 g1739))))) (g548 g1756))) (g390 g1754)) (syntax-error g1737 "import from unknown module"))) (g389 g1754))) (g411 (g529 g1737 (quote (()))) (quote ())))) (car (g390 g1738)) (cdr (g390 g1738))) (g1741 g1737 g1749 g1739)))) (g389 g1749))) ((lambda (g1758) (if g1758 g1758 (error (quote define-syntax) "invalid transformer ~s" g1738))) (g410 g1738))))))))) (g414 (quote local-syntax) (quote letrec-syntax) #t) (g414 (quote local-syntax) (quote let-syntax) #f) (g414 (quote core) (quote fluid-let-syntax) (lambda (g1759 g1760 g1761 g1762) ((lambda (g1763) ((lambda (g1764) (if (if g1764 (apply (lambda (g1765 g1766 g1767 g1768 g1769) (g533 g1766)) g1764) #f) (apply (lambda (g1771 g1772 g1773 g1774 g1775) ((lambda (g1776) (begin (for-each (lambda (g1777 g1778) ((lambda (g1779) (if (memv g1779 (quote (displaced-lexical))) (g408 (g537 g1777 g1761)) (void))) (g389 (g411 g1778 g1760)))) g1772 g1776) (g584 (cons g1774 g1775) (g538 g1759 g1761 g1762) (g404 g1776 ((lambda (g1782) (map (lambda (g1783) (cons (quote deferred) (g579 g1783 g1782 g1761))) g1773)) (g406 g1760)) g1760) g1761))) (map (lambda (g1785) (g529 g1785 g1761)) g1772))) g1764) ((lambda (g1787) (syntax-error (g538 g1759 g1761 g1762))) g1763))) ($syntax-dispatch g1763 (quote (any #2(each (any any)) any . each-any))))) g1759))) (g414 (quote core) (quote quote) (lambda (g1788 g1789 g1790 g1791) ((lambda (g1792) ((lambda (g1793) (if g1793 (apply (lambda (g1794 g1795) ((lambda (g1796) (if ((lambda (g1797) ((lambda (g1798) (if g1798 g1798 ((lambda (g1799) (if g1799 g1799 ((lambda (g1800) (if g1800 g1800 (char? g1797))) (string? g1797)))) (number? g1797)))) (boolean? g1797))) g1796) g1796 (list (quote quote) g1796))) (g597 g1795 g1790))) g1793) ((lambda (g1801) (syntax-error (g538 g1788 g1790 g1791))) g1792))) ($syntax-dispatch g1792 (quote (any any))))) g1788))) (g414 (quote core) (quote syntax) ((lambda () ((lambda () (define g1802 (lambda (g1810 g1811 g1812 g1813 g1814) (if (g416 g1811) ((lambda (g1815) ((lambda (g1816) (if (eq? (g389 g1816) (quote syntax)) (call-with-values (lambda () ((lambda (g1817) (g1803 g1810 (car g1817) (cdr g1817) g1813)) (g390 g1816))) (lambda (g1818 g1819) (values (list (quote ref) g1818) g1819))) (if (g1814 g1811) (syntax-error g1810 "misplaced ellipsis in syntax form") (values (list (quote quote) g1811) g1813)))) (g411 g1815 g1812))) (g529 g1811 (quote (())))) ((lambda (g1820) ((lambda (g1821) (if (if g1821 (apply (lambda (g1822 g1823) (g1814 g1822)) g1821) #f) (apply (lambda (g1824 g1825) (g1802 g1810 g1825 g1812 g1813 (lambda (g1826) #f))) g1821) ((lambda (g1827) (if (if g1827 (apply (lambda (g1828 g1829 g1830) (g1814 g1829)) g1827) #f) (apply (lambda (g1831 g1832 g1833) (((lambda () (define g1834 (lambda (g1835 g1836) ((lambda (g1837) ((lambda (g1838) (if (if g1838 (apply (lambda (g1839 g1840) (g1814 g1839)) g1838) #f) (apply (lambda (g1841 g1842) (g1834 g1842 (lambda (g1843) (call-with-values (lambda () (g1836 (cons (quote ()) g1843))) (lambda (g1844 g1845) (if (null? (car g1845)) (syntax-error g1810 "extra ellipsis in syntax form") (values (g1805 g1844 (car g1845)) (cdr g1845)))))))) g1838) ((lambda (g1846) (call-with-values (lambda () (g1802 g1810 g1835 g1812 g1813 g1814)) (lambda (g1847 g1848) (call-with-values (lambda () (g1836 g1848)) (lambda (g1849 g1850) (values (g1804 g1849 g1847) g1850)))))) g1837))) ($syntax-dispatch g1837 (quote (any . any))))) g1835))) ((lambda () g1834)))) g1833 (lambda (g1851) (call-with-values (lambda () (g1802 g1810 g1831 g1812 (cons (quote ()) g1851) g1814)) (lambda (g1852 g1853) (if (null? (car g1853)) (syntax-error g1810 "extra ellipsis in syntax form") (values (g1806 g1852 (car g1853)) (cdr g1853)))))))) g1827) ((lambda (g1854) (if g1854 (apply (lambda (g1855 g1856) (call-with-values (lambda () (g1802 g1810 g1855 g1812 g1813 g1814)) (lambda (g1857 g1858) (call-with-values (lambda () (g1802 g1810 g1856 g1812 g1858 g1814)) (lambda (g1859 g1860) (values (g1807 g1811 g1855 g1856 g1857 g1859) g1860)))))) g1854) ((lambda (g1861) (if g1861 (apply (lambda (g1862 g1863) ((lambda (g1864) (call-with-values (lambda () (g1802 g1810 g1864 g1812 g1813 g1814)) (lambda (g1865 g1866) (values (g1808 g1811 g1864 g1865) g1866)))) (cons g1862 g1863))) g1861) ((lambda (g1868) (values (list (quote quote) g1811) g1813)) g1820))) ($syntax-dispatch g1820 (quote #2(vector (any . each-any))))))) ($syntax-dispatch g1820 (quote (any . any)))))) ($syntax-dispatch g1820 (quote (any any . any)))))) ($syntax-dispatch g1820 (quote (any any))))) g1811)))) (define g1803 (lambda (g1869 g1870 g1871 g1872) (if (= g1871 0) (values g1870 g1872) (if (null? g1872) (syntax-error g1869 "missing ellipsis in syntax form") (call-with-values (lambda () (g1803 g1869 g1870 (- g1871 1) (cdr g1872))) (lambda (g1873 g1874) ((lambda (g1875) (if g1875 (values (cdr g1875) g1872) ((lambda (g1876) (values g1876 (cons (cons (cons g1873 g1876) (car g1872)) g1874))) (g598 (quote tmp))))) (assq g1873 (car g1872))))))))) (define g1804 (lambda (g1877 g1878) (if (equal? g1878 (quote (quote ()))) g1877 (list (quote append) g1877 g1878)))) (define g1805 (lambda (g1879 g1880) (list (quote apply) (quote (primitive append)) (g1806 g1879 g1880)))) (define g1806 (lambda (g1881 g1882) ((lambda (g1883 g1884) (if (eq? (car g1881) (quote ref)) (car g1884) (if (andmap (lambda (g1885) (if (eq? (car g1885) (quote ref)) (memq (cadr g1885) g1883) #f)) (cdr g1881)) (cons (quote map) (cons (list (quote primitive) (car g1881)) (map ((lambda (g1886) (lambda (g1887) (cdr (assq (cadr g1887) g1886)))) (map cons g1883 g1884)) (cdr g1881)))) (cons (quote map) (cons (list (quote lambda) g1883 g1881) g1884))))) (map cdr g1882) (map (lambda (g1888) (list (quote ref) (car g1888))) g1882)))) (define g1807 (lambda (g1889 g1890 g1891 g1892 g1893) ((lambda (g1894) (if (memv g1894 (quote (quote))) (if (eq? (car g1892) (quote quote)) ((lambda (g1895 g1896) (if (if (eq? g1895 g1890) (eq? g1896 g1891) #f) (list (quote quote) g1889) (list (quote quote) (cons g1895 g1896)))) (cadr g1892) (cadr g1893)) (if (eq? (cadr g1893) (quote ())) (list (quote list) g1892) (list (quote cons) g1892 g1893))) (if (memv g1894 (quote (list))) (cons (quote list) (cons g1892 (cdr g1893))) (list (quote cons) g1892 g1893)))) (car g1893)))) (define g1808 (lambda (g1897 g1898 g1899) (if (eq? (car g1899) (quote quote)) (if (eq? (cadr g1899) g1898) (list (quote quote) g1897) (list (quote quote) (list->vector (cadr g1899)))) (if (eq? (car g1899) (quote list)) (cons (quote vector) (cdr g1899)) (list (quote list->vector) g1899))))) (define g1809 (lambda (g1900) ((lambda (g1901) (if (memv g1901 (quote (ref))) (cadr g1900) (if (memv g1901 (quote (primitive))) (cadr g1900) (if (memv g1901 (quote (quote))) ((lambda (g1902) (if ((lambda (g1903) ((lambda (g1904) (if g1904 g1904 ((lambda (g1905) (if g1905 g1905 ((lambda (g1906) (if g1906 g1906 (char? g1903))) (string? g1903)))) (number? g1903)))) (boolean? g1903))) g1902) g1902 (list (quote quote) g1902))) (cadr g1900)) (if (memv g1901 (quote (lambda))) (list (quote lambda) (cadr g1900) (g1809 (caddr g1900))) (if (memv g1901 (quote (map))) ((lambda (g1907) (cons (if (= (length g1907) 2) (quote map) (quote map)) g1907)) (map g1809 (cdr g1900))) (cons (car g1900) (map g1809 (cdr g1900))))))))) (car g1900)))) ((lambda () (lambda (g1908 g1909 g1910 g1911) ((lambda (g1912) ((lambda (g1913) ((lambda (g1914) (if g1914 (apply (lambda (g1915 g1916) (call-with-values (lambda () (g1802 g1912 g1916 g1909 (quote ()) g594)) (lambda (g1917 g1918) (g1809 g1917)))) g1914) ((lambda (g1919) (syntax-error g1912)) g1913))) ($syntax-dispatch g1913 (quote (any any))))) g1912)) (g538 g1908 g1910 g1911)))))))))) (g414 (quote core) (quote lambda) (lambda (g1920 g1921 g1922 g1923) ((lambda (g1924) ((lambda (g1925) (if g1925 (apply (lambda (g1926 g1927) (g591 (g538 g1920 g1922 g1923) g1927 g1921 g1922 (lambda (g1928 g1929) (list (quote lambda) g1928 g1929)))) g1925) (syntax-error g1924))) ($syntax-dispatch g1924 (quote (any . any))))) g1920))) (g414 (quote core) (quote letrec) (lambda (g1930 g1931 g1932 g1933) ((lambda (g1934) ((lambda (g1935) (if g1935 (apply (lambda (g1936 g1937 g1938 g1939 g1940) ((lambda (g1941) (if (not (g533 g1941)) (g535 (map (lambda (g1942) (g537 g1942 g1932)) g1941) (g538 g1930 g1932 g1933) "bound variable") ((lambda (g1943 g1944) ((lambda (g1945 g1946) (g346 g1933 g1944 (map (lambda (g1947) (g579 g1947 g1946 g1945)) g1938) (g584 (cons g1939 g1940) (g538 g1930 g1945 g1933) g1946 g1945))) (g513 g1941 g1943 g1932) (g405 g1943 g1944 g1931))) (g463 g1941) (map g598 g1941)))) g1937)) g1935) ((lambda (g1951) (syntax-error (g538 g1930 g1932 g1933))) g1934))) ($syntax-dispatch g1934 (quote (any #2(each (any any)) any . each-any))))) g1930))) (g414 (quote core) (quote if) (lambda (g1952 g1953 g1954 g1955) ((lambda (g1956) ((lambda (g1957) (if g1957 (apply (lambda (g1958 g1959 g1960) (list (quote if) (g579 g1959 g1953 g1954) (g579 g1960 g1953 g1954) (g593))) g1957) ((lambda (g1961) (if g1961 (apply (lambda (g1962 g1963 g1964 g1965) (list (quote if) (g579 g1963 g1953 g1954) (g579 g1964 g1953 g1954) (g579 g1965 g1953 g1954))) g1961) ((lambda (g1966) (syntax-error (g538 g1952 g1954 g1955))) g1956))) ($syntax-dispatch g1956 (quote (any any any any)))))) ($syntax-dispatch g1956 (quote (any any any))))) g1952))) (g414 (quote set!) (quote set!) (quote ())) (g414 (quote begin) (quote begin) (quote ())) (g414 (quote $module-key) (quote $module) (quote ())) (g414 (quote $import) (quote $import) #f) (g414 (quote $import) (quote $import-only) #t) (g414 (quote define) (quote define) (quote ())) (g414 (quote define-syntax) (quote define-syntax) (quote ())) (g414 (quote eval-when) (quote eval-when) (quote ())) (g414 (quote core) (quote syntax-case) ((lambda () ((lambda () (define g1967 (lambda (g1971 g1972) ((lambda () (define g1973 (lambda (g1975 g1976 g1977) (if (null? g1975) (values (quote ()) g1977) (call-with-values (lambda () (g1973 (cdr g1975) g1976 g1977)) (lambda (g1978 g1979) (call-with-values (lambda () (g1974 (car g1975) g1976 g1979)) (lambda (g1980 g1981) (values (cons g1980 g1978) g1981)))))))) (define g1974 (lambda (g1982 g1983 g1984) (if (g416 g1982) (if (g536 g1982 g1972) (values (vector (quote free-id) g1982) g1984) (values (quote any) (cons (cons g1982 g1983) g1984))) ((lambda (g1985) ((lambda (g1986) (if (if g1986 (apply (lambda (g1987 g1988) (g594 g1988)) g1986) #f) (apply (lambda (g1989 g1990) (call-with-values (lambda () (g1974 g1989 (+ g1983 1) g1984)) (lambda (g1991 g1992) (values (if (eq? g1991 (quote any)) (quote each-any) (vector (quote each) g1991)) g1992)))) g1986) ((lambda (g1993) (if (if g1993 (apply (lambda (g1994 g1995 g1996 g1997) (g594 g1995)) g1993) #f) (apply (lambda (g1998 g1999 g2000 g2001) (call-with-values (lambda () (g1974 g2001 g1983 g1984)) (lambda (g2002 g2003) (call-with-values (lambda () (g1973 g2000 g1983 g2003)) (lambda (g2005 g2006) (call-with-values (lambda () (g1974 g1998 (+ g1983 1) g2006)) (lambda (g2007 g2008) (values (vector (quote each+) g2007 (reverse g2005) g2002) g2008)))))))) g1993) ((lambda (g2009) (if g2009 (apply (lambda (g2010 g2011) (call-with-values (lambda () (g1974 g2011 g1983 g1984)) (lambda (g2012 g2013) (call-with-values (lambda () (g1974 g2010 g1983 g2013)) (lambda (g2014 g2015) (values (cons g2014 g2012) g2015)))))) g2009) ((lambda (g2016) (if g2016 (apply (lambda () (values (quote ()) g1984)) g2016) ((lambda (g2017) (if g2017 (apply (lambda (g2018) (call-with-values (lambda () (g1974 g2018 g1983 g1984)) (lambda (g2020 g2021) (values (vector (quote vector) g2020) g2021)))) g2017) ((lambda (g2022) (values (vector (quote atom) (g597 g1982 (quote (())))) g1984)) g1985))) ($syntax-dispatch g1985 (quote #2(vector each-any)))))) ($syntax-dispatch g1985 (quote ()))))) ($syntax-dispatch g1985 (quote (any . any)))))) ($syntax-dispatch g1985 (quote (any any . #4(each+ any () any))))))) ($syntax-dispatch g1985 (quote (any any))))) g1982)))) ((lambda () (g1974 g1971 0 (quote ())))))))) (define g1968 (lambda (g2023 g2024 g2025 g2026) ((lambda (g2027 g2028) ((lambda (g2029 g2030) (list (quote apply) (list (quote lambda) g2030 (g579 g2024 (g404 g2029 (map (lambda (g2031 g2032) (cons (quote syntax) (cons g2031 g2032))) g2030 (map cdr g2023)) g2026) (g513 g2027 g2029 (quote (()))))) g2025)) (g463 g2027) (map g598 g2027))) (map car g2023) (map cdr g2023)))) (define g1969 (lambda (g2033 g2034 g2035 g2036 g2037 g2038 g2039) (call-with-values (lambda () (g1967 g2037 g2034)) (lambda (g2040 g2041) (if (not (g534 (map car g2041))) (g535 (map car g2041) g2037 "pattern variable") (if (not (andmap (lambda (g2042) (not (g594 (car g2042)))) g2041)) (syntax-error g2037 "misplaced ellipsis in syntax-case pattern") ((lambda (g2043) (list (list (quote lambda) (list g2043) (list (quote if) ((lambda (g2053) ((lambda (g2054) (if g2054 (apply (lambda () g2043) g2054) ((lambda (g2055) (list (quote if) g2043 (g1968 g2041 g2038 g2043 g2036) ((lambda (g2056) (if ((lambda (g2057) ((lambda (g2058) (if g2058 g2058 ((lambda (g2059) (if g2059 g2059 ((lambda (g2060) (if g2060 g2060 (char? g2057))) (string? g2057)))) (number? g2057)))) (boolean? g2057))) g2056) g2056 (list (quote quote) g2056))) #f))) g2053))) ($syntax-dispatch g2053 (quote #2(atom #t))))) g2038) (g1968 g2041 g2039 g2043 g2036) (g1970 g2033 g2034 g2035 g2036))) (if (eq? g2040 (quote any)) (list (quote list) g2033) (list (quote $syntax-dispatch) g2033 ((lambda (g2061) (if ((lambda (g2062) ((lambda (g2063) (if g2063 g2063 ((lambda (g2064) (if g2064 g2064 ((lambda (g2065) (if g2065 g2065 (char? g2062))) (string? g2062)))) (number? g2062)))) (boolean? g2062))) g2061) g2061 (list (quote quote) g2061))) g2040))))) (g598 (quote tmp))))))))) (define g1970 (lambda (g2066 g2067 g2068 g2069) (if (null? g2068) (list (quote syntax-error) g2066) ((lambda (g2070) ((lambda (g2071) (if g2071 (apply (lambda (g2072 g2073) (if (if (g416 g2072) (if (not (g536 g2072 g2067)) (not (g594 g2072)) #f) #f) ((lambda (g2074 g2075) (list (list (quote lambda) (list g2075) (g579 g2073 (g403 g2074 (cons (quote syntax) (cons g2075 0)) g2069) (g513 (list g2072) (list g2074) (quote (()))))) g2066)) (g461) (g598 g2072)) (g1969 g2066 g2067 (cdr g2068) g2069 g2072 #t g2073))) g2071) ((lambda (g2076) (if g2076 (apply (lambda (g2077 g2078 g2079) (g1969 g2066 g2067 (cdr g2068) g2069 g2077 g2078 g2079)) g2076) ((lambda (g2080) (syntax-error (car g2068) "invalid syntax-case clause")) g2070))) ($syntax-dispatch g2070 (quote (any any any)))))) ($syntax-dispatch g2070 (quote (any any))))) (car g2068))))) ((lambda () (lambda (g2081 g2082 g2083 g2084) ((lambda (g2085) ((lambda (g2086) ((lambda (g2087) (if g2087 (apply (lambda (g2088 g2089 g2090 g2091) (if (andmap (lambda (g2092) (if (g416 g2092) (not (g594 g2092)) #f)) g2090) ((lambda (g2094) (list (list (quote lambda) (list g2094) (g1970 g2094 g2090 g2091 g2082)) (g579 g2089 g2082 (quote (()))))) (g598 (quote tmp))) (syntax-error g2085 "invalid literals list in"))) g2087) (syntax-error g2086))) ($syntax-dispatch g2086 (quote (any any each-any . each-any))))) g2085)) (g538 g2081 g2083 g2084)))))))))) (set! sc-expand ((lambda (g2097 g2098) (lambda (g2099) ((lambda (g2100) (if (if (pair? g2099) (equal? (car g2099) g160) #f) (cadr g2099) (g544 g2099 (quote ()) (g485 g2100) g2097 g2098 (g484 g2100)))) (interaction-environment)))) (quote (l c)) (quote (l)))) (set! $make-environment (lambda (g2101 g2102) ((lambda (g2103) (g482 g2103 (g423 (g424 (quote ((top)))) (cons g2103 (g425 (quote ((top)))))))) (g472 g2101 g2102)))) (set! interaction-environment ((lambda (g2104) (lambda () g2104)) ($make-environment (quote *top*) #t))) (set! environment? (lambda (g2105) (g483 g2105))) (set! identifier? (lambda (g2106) (g415 g2106))) (set! datum->syntax-object (lambda (g2107 g2108) (begin ((lambda (g2109) (if (not (g415 g2109)) (g233 (quote datum->syntax-object) "invalid argument" g2109) (void))) g2107) (g161 g2108 (g164 g2107))))) (set! syntax-object->datum (lambda (g2110) (g597 g2110 (quote (()))))) (set! generate-temporaries (lambda (g2111) (begin ((lambda (g2112) (if (not (list? g2112)) (g233 (quote generate-temporaries) "invalid argument" g2112) (void))) g2111) (map (lambda (g2113) (g537 (gensym) (quote ((top))))) g2111)))) (set! free-identifier=? (lambda (g2114 g2115) (begin ((lambda (g2116) (if (not (g415 g2116)) (g233 (quote free-identifier=?) "invalid argument" g2116) (void))) g2114) ((lambda (g2117) (if (not (g415 g2117)) (g233 (quote free-identifier=?) "invalid argument" g2117) (void))) g2115) (g530 g2114 g2115)))) (set! bound-identifier=? (lambda (g2118 g2119) (begin ((lambda (g2120) (if (not (g415 g2120)) (g233 (quote bound-identifier=?) "invalid argument" g2120) (void))) g2118) ((lambda (g2121) (if (not (g415 g2121)) (g233 (quote bound-identifier=?) "invalid argument" g2121) (void))) g2119) (g532 g2118 g2119)))) (set! literal-identifier=? (lambda (g2122 g2123) (begin ((lambda (g2124) (if (not (g415 g2124)) (g233 (quote literal-identifier=?) "invalid argument" g2124) (void))) g2122) ((lambda (g2125) (if (not (g415 g2125)) (g233 (quote literal-identifier=?) "invalid argument" g2125) (void))) g2123) (g531 g2122 g2123)))) (set! syntax-error (lambda (g2127 . g2126) (begin (for-each (lambda (g2128) ((lambda (g2129) (if (not (string? g2129)) (g233 (quote syntax-error) "invalid argument" g2129) (void))) g2128)) g2126) ((lambda (g2130) (g233 #f g2130 (g597 g2127 (quote (()))))) (if (null? g2126) "invalid syntax" (apply string-append g2126)))))) ((lambda () ((lambda () (define g2131 (lambda (g2138 g2139 g2140) (if (g230 g2138) (g2131 (annotation-expression g2138) g2139 g2140) (if (pair? g2138) ((lambda (g2141) (if g2141 ((lambda (g2142) (if g2142 (cons g2141 g2142) #f)) (g2131 (cdr g2138) g2139 g2140)) #f)) (g2137 (car g2138) g2139 g2140 (quote ()))) (if (null? g2138) (quote ()) (if (g162 g2138) (g2131 (g163 g2138) g2139 (g518 g2140 (g164 g2138))) #f)))))) (define g2132 (lambda (g2143 g2144 g2145 g2146 g2147 g2148) (((lambda () (define g2149 (lambda (g2150 g2151) (if (pair? g2150) (call-with-values (lambda () (g2149 (cdr g2150) g2151)) (lambda (g2152 g2153 g2154) (if g2154 (if (null? g2153) ((lambda (g2155) (if g2155 (values (cons g2155 g2152) g2153 g2154) (values #f #f #f))) (g2137 (car g2150) g2144 g2151 (quote ()))) (values (quote ()) (cdr g2153) (g2137 (car g2150) (car g2153) g2151 g2154))) (values #f #f #f)))) (if (g230 g2150) (g2149 (annotation-expression g2150) g2151) (if (g162 g2150) (g2149 (g163 g2150) (g518 g2151 (g164 g2150))) (values (quote ()) g2145 (g2137 g2150 g2146 g2151 g2148))))))) ((lambda () g2149)))) g2143 g2147))) (define g2133 (lambda (g2156 g2157) (if (g230 g2156) (g2133 (annotation-expression g2156) g2157) (if (pair? g2156) ((lambda (g2158) (if g2158 (cons (g537 (car g2156) g2157) g2158) #f)) (g2133 (cdr g2156) g2157)) (if (null? g2156) (quote ()) (if (g162 g2156) (g2133 (g163 g2156) (g518 g2157 (g164 g2156))) #f)))))) (define g2134 (lambda (g2159 g2160) (if (null? g2159) g2160 (if (eq? g2159 (quote any)) (cons (quote ()) g2160) (if (pair? g2159) (g2134 (car g2159) (g2134 (cdr g2159) g2160)) (if (eq? g2159 (quote each-any)) (cons (quote ()) g2160) ((lambda (g2161) (if (memv g2161 (quote (each))) (g2134 (vector-ref g2159 1) g2160) (if (memv g2161 (quote (each+))) (g2134 (vector-ref g2159 1) (g2134 (reverse (vector-ref g2159 2)) (g2134 (vector-ref g2159 3) g2160))) (if (memv g2161 (quote (free-id atom))) g2160 (if (memv g2161 (quote (vector))) (g2134 (vector-ref g2159 1) g2160) (void)))))) (vector-ref g2159 0)))))))) (define g2135 (lambda (g2162 g2163) (if (null? (car g2162)) g2163 (cons (map car g2162) (g2135 (map cdr g2162) g2163))))) (define g2136 (lambda (g2164 g2165 g2166 g2167) (if (null? g2165) (if (null? g2164) g2167 #f) (if (pair? g2165) (if (pair? g2164) (g2137 (car g2164) (car g2165) g2166 (g2137 (cdr g2164) (cdr g2165) g2166 g2167)) #f) (if (eq? g2165 (quote each-any)) ((lambda (g2168) (if g2168 (cons g2168 g2167) #f)) (g2133 g2164 g2166)) ((lambda (g2169) (if (memv g2169 (quote (each))) (if (null? g2164) (g2134 (vector-ref g2165 1) g2167) ((lambda (g2170) (if g2170 (g2135 g2170 g2167) #f)) (g2131 g2164 (vector-ref g2165 1) g2166))) (if (memv g2169 (quote (free-id))) (if (g416 g2164) (if (g531 (g537 g2164 g2166) (vector-ref g2165 1)) g2167 #f) #f) (if (memv g2169 (quote (each+))) (call-with-values (lambda () (g2132 g2164 (vector-ref g2165 1) (vector-ref g2165 2) (vector-ref g2165 3) g2166 g2167)) (lambda (g2171 g2172 g2173) (if g2173 (if (null? g2172) (if (null? g2171) (g2134 (vector-ref g2165 1) g2173) (g2135 g2171 g2173)) #f) #f))) (if (memv g2169 (quote (atom))) (if (equal? (vector-ref g2165 1) (g597 g2164 g2166)) g2167 #f) (if (memv g2169 (quote (vector))) (if (vector? g2164) (g2137 (vector->list g2164) (vector-ref g2165 1) g2166 g2167) #f) (void))))))) (vector-ref g2165 0))))))) (define g2137 (lambda (g2174 g2175 g2176 g2177) (if (not g2177) #f (if (eq? g2175 (quote any)) (cons (g537 g2174 g2176) g2177) (if (g162 g2174) (g2136 ((lambda (g2178) (if (g230 g2178) (annotation-expression g2178) g2178)) (g163 g2174)) g2175 (g518 g2176 (g164 g2174)) g2177) (g2136 ((lambda (g2179) (if (g230 g2179) (annotation-expression g2179) g2179)) g2174) g2175 g2176 g2177)))))) ((lambda () (set! $syntax-dispatch (lambda (g2180 g2181) (if (eq? g2181 (quote any)) (list g2180) (if (g162 g2180) (g2136 ((lambda (g2182) (if (g230 g2182) (annotation-expression g2182) g2182)) (g163 g2180)) g2181 (g164 g2180) (quote ())) (g2136 ((lambda (g2183) (if (g230 g2183) (annotation-expression g2183) g2183)) g2180) g2181 (quote (())) (quote ())))))))))))))))))))

($sc-put-cte (quote module) (lambda (g2184) ((lambda () (define g2185 (lambda (g2186) ((lambda (g2187) ((lambda (g2188) (if g2188 (apply (lambda (g2189 g2190) (if (identifier? g2189) (andmap g2185 g2190) #f)) g2188) ((lambda (g2192) (identifier? g2192)) g2187))) ($syntax-dispatch g2187 (quote (any . each-any))))) g2186))) ((lambda () ((lambda (g2193) ((lambda (g2194) ((lambda (g2195) ((lambda (g2196) (if g2196 (apply (lambda (g2197 g2198 g2199) (if (andmap g2185 g2198) (list (quote #3(syntax-object begin ((top) #4(ribcage #3(_ e d) #3((top)) #3("i" "i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage (proper-export?) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (quote #3(syntax-object $module ((top) #4(ribcage #3(_ e d) #3((top)) #3("i" "i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage (proper-export?) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2194 (cons (quote #3(syntax-object anon ((top) #4(ribcage #3(_ e d) #3((top)) #3("i" "i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage (proper-export?) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2198 g2199)))) (cons (quote #3(syntax-object $import ((top) #4(ribcage #3(_ e d) #3((top)) #3("i" "i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage (proper-export?) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2194 (quote #3(syntax-object (anon) ((top) #4(ribcage #3(_ e d) #3((top)) #3("i" "i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage (proper-export?) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))))))) (syntax-error g2184 "invalid exports list in"))) g2196) ((lambda (g2203) (if (if g2203 (apply (lambda (g2204 g2205 g2206 g2207) (identifier? g2205)) g2203) #f) (apply (lambda (g2208 g2209 g2210 g2211) (if (andmap g2185 g2210) (cons (quote #3(syntax-object $module ((top) #4(ribcage #4(_ m e d) #4((top)) #4("i" "i" "i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage (proper-export?) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2194 (cons g2209 (cons g2210 g2211)))) (syntax-error g2184 "invalid exports list in"))) g2203) (syntax-error g2195))) ($syntax-dispatch g2195 (quote (any any each-any . each-any)))))) ($syntax-dispatch g2195 (quote (any each-any . each-any))))) g2184)) g2193)) g2184)))))) (quote *top*))

($sc-put-cte (quote import) (lambda (g2215) ((lambda (g2216) ((lambda (g2217) ((lambda (g2218) ((lambda (g2219) (if (if g2219 (apply (lambda (g2220 g2221) (identifier? g2221)) g2219) #f) (apply (lambda (g2222 g2223) (lambda (g2224) (begin ((lambda (g2225) (if (not (if (pair? g2225) (eq? (car g2225) (quote $module)) #f)) (syntax-error g2223 "import from unknown module") (void))) (g2224 g2223)) (list (quote #3(syntax-object $import ((top) #4(ribcage ()) #4(ribcage #1(r) #1((top)) #1("i")) #4(ribcage #2(_ m) #2((top)) #2("i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2217 g2223)))) g2219) (syntax-error g2218))) ($syntax-dispatch g2218 (quote (any any))))) g2215)) g2216)) g2215)) (quote *top*))

($sc-put-cte (quote import-only) (lambda (g2226) ((lambda (g2227) ((lambda (g2228) ((lambda (g2229) ((lambda (g2230) (if (if g2230 (apply (lambda (g2231 g2232) (identifier? g2232)) g2230) #f) (apply (lambda (g2233 g2234) (lambda (g2235) (begin ((lambda (g2236) (if (not (if (pair? g2236) (eq? (car g2236) (quote $module)) #f)) (syntax-error g2234 "import from unknown module") (void))) (g2235 g2234)) (list (quote #3(syntax-object $import-only ((top) #4(ribcage ()) #4(ribcage #1(r) #1((top)) #1("i")) #4(ribcage #2(_ m) #2((top)) #2("i" "i")) #4(ribcage #1(orig) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2228 g2234)))) g2230) (syntax-error g2229))) ($syntax-dispatch g2229 (quote (any any))))) g2226)) g2227)) g2226)) (quote *top*))

($sc-put-cte (quote with-syntax) (lambda (g2237) ((lambda (g2238) ((lambda (g2239) (if g2239 (apply (lambda (g2240 g2241 g2242) (cons (quote #3(syntax-object begin ((top) #4(ribcage #3(_ e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2241 g2242))) g2239) ((lambda (g2244) (if g2244 (apply (lambda (g2245 g2246 g2247 g2248 g2249) (list (quote #3(syntax-object syntax-case ((top) #4(ribcage #5(_ out in e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2247 (quote ()) (list g2246 (cons (quote #3(syntax-object begin ((top) #4(ribcage #5(_ out in e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2248 g2249))))) g2244) ((lambda (g2251) (if g2251 (apply (lambda (g2252 g2253 g2254 g2255 g2256) (list (quote #3(syntax-object syntax-case ((top) #4(ribcage #5(_ out in e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (quote #3(syntax-object list ((top) #4(ribcage #5(_ out in e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2254) (quote ()) (list g2253 (cons (quote #3(syntax-object begin ((top) #4(ribcage #5(_ out in e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2255 g2256))))) g2251) (syntax-error g2238))) ($syntax-dispatch g2238 (quote (any #2(each (any any)) any . each-any)))))) ($syntax-dispatch g2238 (quote (any ((any any)) any . each-any)))))) ($syntax-dispatch g2238 (quote (any () any . each-any))))) g2237)) (quote *top*))

($sc-put-cte (quote syntax-rules) (lambda (g2260) ((lambda (g2261) ((lambda (g2262) (if g2262 (apply (lambda (g2263 g2264 g2265 g2266 g2267) (list (quote #3(syntax-object lambda ((top) #4(ribcage #5(_ k keyword pattern template) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object (x) ((top) #4(ribcage #5(_ k keyword pattern template) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (quote #3(syntax-object syntax-case ((top) #4(ribcage #5(_ k keyword pattern template) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (quote #3(syntax-object x ((top) #4(ribcage #5(_ k keyword pattern template) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2264 (map (lambda (g2270 g2269) (list (cons (quote #3(syntax-object dummy ((top) #4(ribcage #5(_ k keyword pattern template) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2269) (list (quote #3(syntax-object syntax ((top) #4(ribcage #5(_ k keyword pattern template) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2270))) g2267 g2266)))))) g2262) (syntax-error g2261))) ($syntax-dispatch g2261 (quote (any each-any . #2(each ((any . any) any))))))) g2260)) (quote *top*))

($sc-put-cte (quote or) (lambda (g2271) ((lambda (g2272) ((lambda (g2273) (if g2273 (apply (lambda (g2274) (quote #3(syntax-object #f ((top) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))))) g2273) ((lambda (g2275) (if g2275 (apply (lambda (g2276 g2277) g2277) g2275) ((lambda (g2278) (if g2278 (apply (lambda (g2279 g2280 g2281 g2282) (list (quote #3(syntax-object let ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list (quote #3(syntax-object t ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2280)) (list (quote #3(syntax-object if ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (quote #3(syntax-object or ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2281 g2282))))) g2278) (syntax-error g2272))) ($syntax-dispatch g2272 (quote (any any any . each-any)))))) ($syntax-dispatch g2272 (quote (any any)))))) ($syntax-dispatch g2272 (quote (any))))) g2271)) (quote *top*))

($sc-put-cte (quote and) (lambda (g2284) ((lambda (g2285) ((lambda (g2286) (if g2286 (apply (lambda (g2287 g2288 g2289 g2290) (cons (quote #3(syntax-object if ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2288 (cons (cons (quote #3(syntax-object and ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2289 g2290)) (quote #3(syntax-object (#f) ((top) #4(ribcage #4(_ e1 e2 e3) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))))))) g2286) ((lambda (g2292) (if g2292 (apply (lambda (g2293 g2294) g2294) g2292) ((lambda (g2295) (if g2295 (apply (lambda (g2296) (quote #3(syntax-object #t ((top) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))))) g2295) (syntax-error g2285))) ($syntax-dispatch g2285 (quote (any)))))) ($syntax-dispatch g2285 (quote (any any)))))) ($syntax-dispatch g2285 (quote (any any any . each-any))))) g2284)) (quote *top*))

($sc-put-cte (quote let) (lambda (g2297) ((lambda (g2298) ((lambda (g2299) (if (if g2299 (apply (lambda (g2300 g2301 g2302 g2303 g2304) (andmap identifier? g2301)) g2299) #f) (apply (lambda (g2306 g2307 g2308 g2309 g2310) (cons (cons (quote #3(syntax-object lambda ((top) #4(ribcage #5(_ x v e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2307 (cons g2309 g2310))) g2308)) g2299) ((lambda (g2314) (if (if g2314 (apply (lambda (g2315 g2316 g2317 g2318 g2319 g2320) (andmap identifier? (cons g2316 g2317))) g2314) #f) (apply (lambda (g2322 g2323 g2324 g2325 g2326 g2327) (cons (list (quote #3(syntax-object letrec ((top) #4(ribcage #6(_ f x v e1 e2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list g2323 (cons (quote #3(syntax-object lambda ((top) #4(ribcage #6(_ f x v e1 e2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2324 (cons g2326 g2327))))) g2323) g2325)) g2314) (syntax-error g2298))) ($syntax-dispatch g2298 (quote (any any #2(each (any any)) any . each-any)))))) ($syntax-dispatch g2298 (quote (any #2(each (any any)) any . each-any))))) g2297)) (quote *top*))

($sc-put-cte (quote let*) (lambda (g2331) ((lambda (g2332) ((lambda (g2333) (if (if g2333 (apply (lambda (g2334 g2335 g2336 g2337 g2338) (andmap identifier? g2335)) g2333) #f) (apply (lambda (g2340 g2341 g2342 g2343 g2344) (((lambda () (define g2345 (lambda (g2346) (if (null? g2346) (cons (quote #3(syntax-object let ((top) #4(ribcage ()) #4(ribcage #1(bindings) #1((top)) #1("i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #5(let* x v e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (quote ()) (cons g2343 g2344))) ((lambda (g2348) ((lambda (g2349) (if g2349 (apply (lambda (g2350 g2351) (list (quote #3(syntax-object let ((top) #4(ribcage #2(body binding) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(bindings) #1((top)) #1("i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #5(let* x v e1 e2) #5((top)) #5("i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list g2351) g2350)) g2349) (syntax-error g2348))) ($syntax-dispatch g2348 (quote (any any))))) (list (g2345 (cdr g2346)) (car g2346)))))) ((lambda () g2345)))) (map list g2341 g2342))) g2333) (syntax-error g2332))) ($syntax-dispatch g2332 (quote (any #2(each (any any)) any . each-any))))) g2331)) (quote *top*))

($sc-put-cte (quote cond) (lambda (g2354) ((lambda (g2355) ((lambda (g2356) (if g2356 (apply (lambda (g2357 g2358 g2359) (((lambda () (define g2360 (lambda (g2361 g2362) (if (null? g2362) ((lambda (g2363) ((lambda (g2364) (if g2364 (apply (lambda (g2365 g2366) (cons (quote #3(syntax-object begin ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2365 g2366))) g2364) ((lambda (g2368) (if g2368 (apply (lambda (g2369) (cons (quote #3(syntax-object let ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons (list (list (quote #3(syntax-object t ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2369)) (quote #3(syntax-object ((if t t)) ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))))))) g2368) ((lambda (g2370) (if g2370 (apply (lambda (g2371 g2372) (list (quote #3(syntax-object let ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list (quote #3(syntax-object t ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2371)) (list (quote #3(syntax-object if ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2372 (quote #3(syntax-object (t) ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))))))) g2370) ((lambda (g2373) (if g2373 (apply (lambda (g2374 g2375 g2376) (list (quote #3(syntax-object if ((top) #4(ribcage #3(e0 e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2374 (cons (quote #3(syntax-object begin ((top) #4(ribcage #3(e0 e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2375 g2376)))) g2373) ((lambda (g2378) (syntax-error g2354)) g2363))) ($syntax-dispatch g2363 (quote (any any . each-any)))))) ($syntax-dispatch g2363 (quote (any #2(free-id #3(syntax-object => ((top) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) any)))))) ($syntax-dispatch g2363 (quote (any)))))) ($syntax-dispatch g2363 (quote (#2(free-id #3(syntax-object else ((top) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) any . each-any))))) g2361) ((lambda (g2379) ((lambda (g2380) ((lambda (g2381) ((lambda (g2382) (if g2382 (apply (lambda (g2383) (list (quote #3(syntax-object let ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list (quote #3(syntax-object t ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2383)) (list (quote #3(syntax-object if ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #1(e0) #1((top)) #1("i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2380))) g2382) ((lambda (g2384) (if g2384 (apply (lambda (g2385 g2386) (list (quote #3(syntax-object let ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list (quote #3(syntax-object t ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2385)) (list (quote #3(syntax-object if ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2386 (quote #3(syntax-object (t) ((top) #4(ribcage #2(e0 e1) #2((top)) #2("i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))))) g2380))) g2384) ((lambda (g2387) (if g2387 (apply (lambda (g2388 g2389 g2390) (list (quote #3(syntax-object if ((top) #4(ribcage #3(e0 e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2388 (cons (quote #3(syntax-object begin ((top) #4(ribcage #3(e0 e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2389 g2390)) g2380)) g2387) ((lambda (g2392) (syntax-error g2354)) g2381))) ($syntax-dispatch g2381 (quote (any any . each-any)))))) ($syntax-dispatch g2381 (quote (any #2(free-id #3(syntax-object => ((top) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #3(_ m1 m2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) any)))))) ($syntax-dispatch g2381 (quote (any))))) g2361)) g2379)) (g2360 (car g2362) (cdr g2362)))))) ((lambda () g2360)))) g2358 g2359)) g2356) (syntax-error g2355))) ($syntax-dispatch g2355 (quote (any any . each-any))))) g2354)) (quote *top*))

($sc-put-cte (quote do) (lambda (g2394) ((lambda (g2395) ((lambda (g2396) (if g2396 (apply (lambda (g2397 g2398 g2399 g2400 g2401 g2402 g2403) ((lambda (g2404) ((lambda (g2405) (if g2405 (apply (lambda (g2406) ((lambda (g2407) ((lambda (g2408) (if g2408 (apply (lambda () (list (quote #3(syntax-object let ((top) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object doloop ((top) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (map list g2398 g2399) (list (quote #3(syntax-object if ((top) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object not ((top) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2401) (cons (quote #3(syntax-object begin ((top) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (append g2403 (list (cons (quote #3(syntax-object doloop ((top) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2406))))))) g2408) ((lambda (g2413) (if g2413 (apply (lambda (g2414 g2415) (list (quote #3(syntax-object let ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object doloop ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (map list g2398 g2399) (list (quote #3(syntax-object if ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2401 (cons (quote #3(syntax-object begin ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2414 g2415)) (cons (quote #3(syntax-object begin ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (append g2403 (list (cons (quote #3(syntax-object doloop ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage #1(step) #1((top)) #1("i")) #4(ribcage #7(_ var init step e0 e1 c) #7((top)) #7("i" "i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(orig-x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2406))))))) g2413) (syntax-error g2407))) ($syntax-dispatch g2407 (quote (any . each-any)))))) ($syntax-dispatch g2407 (quote ())))) g2402)) g2405) (syntax-error g2404))) ($syntax-dispatch g2404 (quote each-any)))) (map (lambda (g2422 g2423) ((lambda (g2424) ((lambda (g2425) (if g2425 (apply (lambda () g2422) g2425) ((lambda (g2426) (if g2426 (apply (lambda (g2427) g2427) g2426) ((lambda (g2428) (syntax-error g2394)) g2424))) ($syntax-dispatch g2424 (quote (any)))))) ($syntax-dispatch g2424 (quote ())))) g2423)) g2398 g2400))) g2396) (syntax-error g2395))) ($syntax-dispatch g2395 (quote (any #2(each (any any . any)) (any . each-any) . each-any))))) g2394)) (quote *top*))

($sc-put-cte (quote quasiquote) ((lambda () (define g2431 (lambda (g2440) (if (identifier? g2440) (free-identifier=? g2440 (quote #3(syntax-object quote ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) #f))) (define g2432 (lambda (g2441) (if (identifier? g2441) (free-identifier=? g2441 (quote #3(syntax-object list ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) #f))) (define g2433 (lambda (g2442) (if (identifier? g2442) (free-identifier=? g2442 (quote #3(syntax-object cons ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t))))) #f))) (define g2434 (lambda (g2443) ((lambda (g2444) ((lambda (g2445) (if g2445 (apply (lambda (g2446) (g2431 g2446)) g2445) ((lambda (g2447) #f) g2444))) ($syntax-dispatch g2444 (quote (any ()))))) g2443))) (define g2435 (lambda (g2448 g2449) (((lambda () (define g2450 (lambda (g2451) (if (null? g2451) g2449 (g2436 (car g2451) (g2450 (cdr g2451)))))) ((lambda () g2450)))) g2448))) (define g2436 (lambda (g2452 g2453) ((lambda (g2454) ((lambda (g2455) (if g2455 (apply (lambda (g2456 g2457) ((lambda (g2458) ((lambda (g2459) (if (if g2459 (apply (lambda (g2460 g2461) (g2431 g2460)) g2459) #f) (apply (lambda (g2462 g2463) ((lambda (g2464) ((lambda (g2465) (if (if g2465 (apply (lambda (g2466 g2467) (g2431 g2466)) g2465) #f) (apply (lambda (g2468 g2469) (list (quote #3(syntax-object quote ((top) #4(ribcage #2(quote? dx) #2((top)) #2("i" "i")) #4(ribcage #2(quote? dy) #2((top)) #2("i" "i")) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (cons g2469 g2463))) g2465) ((lambda (g2470) (if (null? g2463) (list (quote #3(syntax-object list ((top) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage #2(quote? dy) #2((top)) #2("i" "i")) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2456) (list (quote #3(syntax-object cons ((top) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage #2(quote? dy) #2((top)) #2("i" "i")) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2456 g2457))) g2464))) ($syntax-dispatch g2464 (quote (any any))))) g2456)) g2459) ((lambda (g2471) (if (if g2471 (apply (lambda (g2472 g2473) (g2432 g2472)) g2471) #f) (apply (lambda (g2474 g2475) (cons (quote #3(syntax-object list ((top) #4(ribcage #2(listp stuff) #2((top)) #2("i" "i")) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (cons g2456 g2475))) g2471) ((lambda (g2476) (list (quote #3(syntax-object cons ((top) #4(ribcage #1(else) #1((top)) #1("i")) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2456 g2457)) g2458))) ($syntax-dispatch g2458 (quote (any . any)))))) ($syntax-dispatch g2458 (quote (any any))))) g2457)) g2455) (syntax-error g2454))) ($syntax-dispatch g2454 (quote (any any))))) (list g2452 g2453)))) (define g2437 (lambda (g2477 g2478) ((lambda (g2479) (if (null? g2479) (quote #3(syntax-object (quote ()) ((top) #4(ribcage ()) #4(ribcage #1(ls) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (if (null? (cdr g2479)) (car g2479) ((lambda (g2480) ((lambda (g2481) (if g2481 (apply (lambda (g2482) (cons (quote #3(syntax-object append ((top) #4(ribcage #1(p) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(ls) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(x y) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2482)) g2481) (syntax-error g2480))) ($syntax-dispatch g2480 (quote each-any)))) g2479)))) (((lambda () (define g2484 (lambda (g2485) (if (null? g2485) (if (g2434 g2478) (quote ()) (list g2478)) (if (g2434 (car g2485)) (g2484 (cdr g2485)) (cons (car g2485) (g2484 (cdr g2485))))))) ((lambda () g2484)))) g2477)))) (define g2438 (lambda (g2486) ((lambda (g2487) ((lambda (g2488) ((lambda (g2489) ((lambda (g2490) (if (if g2490 (apply (lambda (g2491 g2492) (g2431 g2491)) g2490) #f) (apply (lambda (g2493 g2494) (list (quote #3(syntax-object quote ((top) #4(ribcage #2(quote? x) #2((top)) #2("i" "i")) #4(ribcage #1(pat-x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (list->vector g2494))) g2490) ((lambda (g2496) (((lambda () (define g2497 (lambda (g2498 g2499) ((lambda (g2500) ((lambda (g2501) (if (if g2501 (apply (lambda (g2502 g2503) (g2431 g2502)) g2501) #f) (apply (lambda (g2504 g2505) (g2499 (map (lambda (g2506) (list (quote #3(syntax-object quote ((top) #4(ribcage #2(quote? x) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(x k) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage #1(pat-x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2506)) g2505))) g2501) ((lambda (g2507) (if (if g2507 (apply (lambda (g2508 g2509) (g2432 g2508)) g2507) #f) (apply (lambda (g2510 g2511) (g2499 g2511)) g2507) ((lambda (g2513) (if (if g2513 (apply (lambda (g2514 g2515 g2516) (g2433 g2514)) g2513) #f) (apply (lambda (g2517 g2518 g2519) (g2497 g2519 (lambda (g2520) (g2499 (cons g2518 g2520))))) g2513) ((lambda (g2521) (list (quote #3(syntax-object list->vector ((top) #4(ribcage #1(else) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(x k) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage #1(pat-x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2488)) g2500))) ($syntax-dispatch g2500 (quote (any any any)))))) ($syntax-dispatch g2500 (quote (any . each-any)))))) ($syntax-dispatch g2500 (quote (any each-any))))) g2498))) ((lambda () g2497)))) g2486 (lambda (g2522) (cons (quote #3(syntax-object vector ((top) #4(ribcage ()) #4(ribcage #1(ls) #1((top)) #1("i")) #4(ribcage #1(_) #1((top)) #1("i")) #4(ribcage #1(pat-x) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2522)))) g2489))) ($syntax-dispatch g2489 (quote (any each-any))))) g2488)) g2487)) g2486))) (define g2439 (lambda (g2523 g2524) ((lambda (g2525) ((lambda (g2526) (if g2526 (apply (lambda (g2527) (if (= g2524 0) g2527 (g2436 (quote #3(syntax-object (quote unquote) ((top) #4(ribcage #1(p) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (g2439 (list g2527) (- g2524 1))))) g2526) ((lambda (g2528) (if g2528 (apply (lambda (g2529 g2530) (if (= g2524 0) (g2435 g2529 (g2439 g2530 g2524)) (g2436 (g2436 (quote #3(syntax-object (quote unquote) ((top) #4(ribcage #2(p q) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (g2439 g2529 (- g2524 1))) (g2439 g2530 g2524)))) g2528) ((lambda (g2533) (if g2533 (apply (lambda (g2534 g2535) (if (= g2524 0) (g2437 g2534 (g2439 g2535 g2524)) (g2436 (g2436 (quote #3(syntax-object (quote unquote-splicing) ((top) #4(ribcage #2(p q) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (g2439 g2534 (- g2524 1))) (g2439 g2535 g2524)))) g2533) ((lambda (g2538) (if g2538 (apply (lambda (g2539) (g2436 (quote #3(syntax-object (quote quasiquote) ((top) #4(ribcage #1(p) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) (g2439 (list g2539) (+ g2524 1)))) g2538) ((lambda (g2540) (if g2540 (apply (lambda (g2541 g2542) (g2436 (g2439 g2541 g2524) (g2439 g2542 g2524))) g2540) ((lambda (g2543) (if g2543 (apply (lambda (g2544) (g2438 (g2439 g2544 g2524))) g2543) ((lambda (g2546) (list (quote #3(syntax-object quote ((top) #4(ribcage #1(p) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) g2546)) g2525))) ($syntax-dispatch g2525 (quote #2(vector each-any)))))) ($syntax-dispatch g2525 (quote (any . any)))))) ($syntax-dispatch g2525 (quote (#2(free-id #3(syntax-object quasiquote ((top) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) any)))))) ($syntax-dispatch g2525 (quote ((#2(free-id #3(syntax-object unquote-splicing ((top) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) . each-any) . any)))))) ($syntax-dispatch g2525 (quote ((#2(free-id #3(syntax-object unquote ((top) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) . each-any) . any)))))) ($syntax-dispatch g2525 (quote (#2(free-id #3(syntax-object unquote ((top) #4(ribcage ()) #4(ribcage #2(p lev) #2((top)) #2("i" "i")) #4(ribcage #9(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector quasi) #9((top)) #9("i" "i" "i" "i" "i" "i" "i" "i" "i")) #3(top-ribcage *top* #t)))) any))))) g2523))) ((lambda () (lambda (g2547) ((lambda (g2548) ((lambda (g2549) (if g2549 (apply (lambda (g2550 g2551) (g2439 g2551 0)) g2549) (syntax-error g2548))) ($syntax-dispatch g2548 (quote (any any))))) g2547)))))) (quote *top*))

($sc-put-cte (quote include) (lambda (g2552) ((lambda () (define g2553 (lambda (g2554 g2555) ((lambda (g2556) (((lambda () (define g2557 (lambda () ((lambda (g2558) (if (eof-object? g2558) (begin (close-input-port g2556) (quote ())) (cons (datum->syntax-object g2555 g2558) (g2557)))) (read g2556)))) ((lambda () g2557)))))) (open-input-file g2554)))) ((lambda () ((lambda (g2559) ((lambda (g2560) (if g2560 (apply (lambda (g2561 g2562) ((lambda (g2563) ((lambda (g2564) ((lambda (g2565) (if g2565 (apply (lambda (g2566) (cons (quote #3(syntax-object begin ((top) #4(ribcage #1(exp) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #1(fn) #1((top)) #1("i")) #4(ribcage #2(k filename) #2((top)) #2("i" "i")) #4(ribcage (read-file) ((top)) ("i")) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2566)) g2565) (syntax-error g2564))) ($syntax-dispatch g2564 (quote each-any)))) (g2553 g2563 g2561))) (syntax-object->datum g2562))) g2560) (syntax-error g2559))) ($syntax-dispatch g2559 (quote (any any))))) g2552)))))) (quote *top*))

($sc-put-cte (quote unquote) (lambda (g2568) ((lambda (g2569) ((lambda (g2570) (if g2570 (apply (lambda (g2571 g2572) (syntax-error g2568 "expression not valid outside of quasiquote")) g2570) (syntax-error g2569))) ($syntax-dispatch g2569 (quote (any . each-any))))) g2568)) (quote *top*))

($sc-put-cte (quote unquote-splicing) (lambda (g2573) ((lambda (g2574) ((lambda (g2575) (if g2575 (apply (lambda (g2576 g2577) (syntax-error g2573 "expression not valid outside of quasiquote")) g2575) (syntax-error g2574))) ($syntax-dispatch g2574 (quote (any . each-any))))) g2573)) (quote *top*))

($sc-put-cte (quote case) (lambda (g2578) ((lambda (g2579) ((lambda (g2580) (if g2580 (apply (lambda (g2581 g2582 g2583 g2584) ((lambda (g2585) ((lambda (g2586) (list (quote #3(syntax-object let ((top) #4(ribcage #1(body) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list (quote #3(syntax-object t ((top) #4(ribcage #1(body) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2582)) g2586)) g2585)) (((lambda () (define g2587 (lambda (g2588 g2589) (if (null? g2589) ((lambda (g2590) ((lambda (g2591) (if g2591 (apply (lambda (g2592 g2593) (cons (quote #3(syntax-object begin ((top) #4(ribcage #2(e1 e2) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2592 g2593))) g2591) ((lambda (g2595) (if g2595 (apply (lambda (g2596 g2597 g2598) (list (quote #3(syntax-object if ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object memv ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object quote ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2596)) (cons (quote #3(syntax-object begin ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2597 g2598)))) g2595) ((lambda (g2601) (syntax-error g2578)) g2590))) ($syntax-dispatch g2590 (quote (each-any any . each-any)))))) ($syntax-dispatch g2590 (quote (#2(free-id #3(syntax-object else ((top) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) any . each-any))))) g2588) ((lambda (g2602) ((lambda (g2603) ((lambda (g2604) ((lambda (g2605) (if g2605 (apply (lambda (g2606 g2607 g2608) (list (quote #3(syntax-object if ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object memv ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object t ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object quote ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2606)) (cons (quote #3(syntax-object begin ((top) #4(ribcage #3(k e1 e2) #3((top)) #3("i" "i" "i")) #4(ribcage #1(rest) #1((top)) #1("i")) #4(ribcage ()) #4(ribcage #2(clause clauses) #2((top)) #2("i" "i")) #4(ribcage #1(f) #1((top)) #1("i")) #4(ribcage #4(_ e m1 m2) #4((top)) #4("i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2607 g2608)) g2603)) g2605) ((lambda (g2611) (syntax-error g2578)) g2604))) ($syntax-dispatch g2604 (quote (each-any any . each-any))))) g2588)) g2602)) (g2587 (car g2589) (cdr g2589)))))) ((lambda () g2587)))) g2583 g2584))) g2580) (syntax-error g2579))) ($syntax-dispatch g2579 (quote (any any any . each-any))))) g2578)) (quote *top*))

($sc-put-cte (quote identifier-syntax) (lambda (g2613) ((lambda (g2614) ((lambda (g2615) (if g2615 (apply (lambda (g2616 g2617) (list (quote #3(syntax-object lambda ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object (x) ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object syntax-case ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object x ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote ()) (list (quote #3(syntax-object id ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object (identifier? (syntax id)) ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object syntax ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2617)) (list (cons g2616 (quote (#3(syntax-object x ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))) #3(syntax-object ... ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))))) (list (quote #3(syntax-object syntax ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2617 (quote (#3(syntax-object x ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))) #3(syntax-object ... ((top) #4(ribcage #2(_ e) #2((top)) #2("i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))))))))))) g2615) ((lambda (g2618) (if (if g2618 (apply (lambda (g2619 g2620 g2621 g2622 g2623 g2624) (if (identifier? g2620) (identifier? g2622) #f)) g2618) #f) (apply (lambda (g2625 g2626 g2627 g2628 g2629 g2630) (list (quote #3(syntax-object cons ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object (quote macro!) ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object lambda ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object (x) ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object syntax-case ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object x ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (quote #3(syntax-object (set!) ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (list (quote #3(syntax-object set! ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2628 g2629) (list (quote #3(syntax-object syntax ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2630)) (list (cons g2626 (quote (#3(syntax-object x ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))) #3(syntax-object ... ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))))) (list (quote #3(syntax-object syntax ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (cons g2627 (quote (#3(syntax-object x ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t))) #3(syntax-object ... ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))))))) (list g2626 (list (quote #3(syntax-object identifier? ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) (list (quote #3(syntax-object syntax ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2626)) (list (quote #3(syntax-object syntax ((top) #4(ribcage #6(_ id exp1 var val exp2) #6((top)) #6("i" "i" "i" "i" "i" "i")) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) g2627)))))) g2618) (syntax-error g2614))) ($syntax-dispatch g2614 (quote (any (any any) ((#2(free-id #3(syntax-object set! ((top) #4(ribcage ()) #4(ribcage #1(x) #1((top)) #1("i")) #3(top-ribcage *top* #t)))) any any) any))))))) ($syntax-dispatch g2614 (quote (any any))))) g2613)) (quote *top*))

