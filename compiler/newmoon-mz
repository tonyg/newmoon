"true" "-*- scheme -*-";exec env mzscheme -f "$0" -e "(apply newmoon-main \"`dirname $0`\" (vector->list (current-command-line-arguments)))" -- "$@"

(define (newmoon-main raw-script-directory . args)
  (define interactive #f)
  (define mode 'compiling)

  (define (extract-debug-settings arg)
    (let ((setting (substring arg 2 (string-length arg))))
      (if (string=? setting "")
	  "sequence-phases"
	  setting)))

  (define (update-and-summarise-debug! new-value)
    (main$debug new-value)
    (display ";; Setting debug mode to ")
    (display new-value)
    (display ".")
    (newline))

  (define (process-argument arg rest)
    (if (< (string-length arg) 2)
	(error "Command-line switches look like '-x' where is the switch identifier.")
	(case (string-ref arg 1)
	  ((#\d) (update-and-summarise-debug! (extract-debug-settings arg)) rest)
	  ((#\D) (update-and-summarise-debug! #f) rest)
	  ((#\p) (main$libpath (cons (car rest) (main$libpath))) (cdr rest))
	  ((#\b) (compiler$without-basic-libraries #t) rest)
	  ((#\B) (compiler$without-basic-libraries #f) rest)
	  ((#\x) (compiler$make-program #t) rest)
	  ((#\X) (compiler$make-program #f) rest)
	  ((#\i) (set! interactive #t) rest)
	  ((#\e) (set! mode 'evaluating) rest)
	  ((#\N) (compiler$target-namespace (car rest)) (cdr rest))
	  ((#\L) (compiler$extra-backend-args (cons (car rest) (compiler$extra-backend-args)))
	         (cdr rest))
	  (else
	   (error "Unknown command-line switch" arg)))))

  (define (interactive-main)
    (display "newmoon> ")
    (let ((expr (read)))
      (if (eof-object? expr)
	  'done!
	  (cond
	   ((string? expr)
	    (compile-file expr)
	    (interactive-main))
	   ((and (pair? expr) (eq? (car expr) 'compile))
	    (compile-expr (cadr expr)))
	   ((and (pair? expr) (eq? (car expr) 'eval))
	    (core-scheme-eval (cadr expr)))
	   (else (case expr
		   (else (for-each display (list "Newmoon interactive mode." #\newline
						 "Type 'help' for help." #\newline
						 #\newline
						 "  \"filename.scm\" - compile that file" #\newline
						 #\newline))
			 (interactive-main))))))))

  (define (evaluate-file filename)
    (let* ((expr `(begin ,@(call-with-input-file filename read-all-sexps))))
      (pretty-print `(EVALUATING ,expr))
      (pretty-print `(RESULT ,(core-scheme-eval expr)))))

  (define script-directory (path->string (path->complete-path raw-script-directory)))

  ;;---------------------------------------------------------------------------
  ;; Main program starts

  (display (string-append ";; This is newmoon, running from "script-directory))
  (newline)

  (current-load-relative-directory script-directory)
  (parameterize ((current-inspector (make-inspector)))
    (load-relative "support/mzscheme.scm")
    (load-relative "main.scm")
    (load-relative "backend/c/c-backend.scm")
    )

  (let loop ((args args))
    (cond
     ((not (null? args)) (let ((arg (car args))
			       (rest (cdr args)))
			   (case (string-ref arg 0)
			     ((#\-)
			      (loop (process-argument arg rest)))
			     (else
			      (case mode
				((compiling) (compile-file arg))
				((evaluating) (evaluate-file arg))
				(else (error "Illegal main-driver mode" mode)))
			      (loop rest)))))
     (interactive (interactive-main))
     (else
      (display ";; finished.")
      (newline)))))
